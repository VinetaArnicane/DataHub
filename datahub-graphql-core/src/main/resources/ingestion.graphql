# DataHub UI Application-Specific GraphQL Types

extend type Query {
  """
  List all secrets stored in DataHub
  """
  listSecrets(input: ListSecretsInput!): ListSecretsResult

  """
  List all ingestion sources
  """
  listIngestionSources(input: ListIngestionSourcesInput!): ListIngestionSourcesResult

  """
  Fetch a specific ingestion source
  urn: The primary key associated with the ingestion execution request.
  """
  ingestionSource(urn: String!): IngestionSource

  """
  Create a request to execute an ingestion job
  urn: The primary key associated with the ingestion execution request.
  """
  getIngestionExecutionRequest(urn: String!): ExecutionRequest
}

extend type Mutation {
  """
  Create a new Secret
  """
  createSecret(input: CreateSecretInput!): String

  """
  Delete a Secret
  """
  deleteSecret(urn: String!): String

  """
  Create a new ingestion source
  """
  createIngestionSource(input: UpdateIngestionSourceInput!): String

  """
  Update an existing ingestion source
  """
  updateIngestionSource(urn: String!, input: UpdateIngestionSourceInput!): String

  """
  Delete an existing ingestion source
  """
  deleteIngestionSource(urn: String!): String

  """
  Create a request to execute an ingestion job
  input: Input required for creating an ingestion execution request
  """
  createIngestionExecutionRequest(input: CreateIngestionExecutionRequestInput!): String
}

"""
The source type of an execution request.
"""
enum ExecutionRequestSourceType {
  """
  The source of the request is an ingestion source
  """
  INGESTION_SOURCE
}

"""
Information about the source of an execution request
"""
type ExecutionRequestSource {
  """
  The type of the source, e.g. INGESTION_SOURCE
  """
  type: ExecutionRequestSourceType!
}

"""
Input provided when creating an Execution Request
"""
type ExecutionRequestInput {
  """
  The type of the task to executed
  """
  task: String!

  """
  The source of the execution request
  """
  source: ExecutionRequestSource!

  """
  Arguments provided when creating the execution request
  """
  arguments: [StringMapEntry!]
}

"""
Logs captured from an execution request
"""
type ExecutionRequestLogs {
  """
  Errors logged to stdErr
  """
  stdErr: String

  """
  Errors logged to stdOut
  """
  stdOut: String
}

"""
The result of an ExecutionRequest
"""
type ExecutionRequestResult {
  """
  The result of the request, e.g. either SUCCEEDED or FAILED
  """
  result: String!

  """
  Time at which the task began
  """
  startTimeMs: Long

  """
  Duration of the task
  """
  durationMs: Long

  """
  Logs from the execution
  """
  logs: ExecutionRequestLogs
}

"""
Retrieve an ingestion execution request
"""
type ExecutionRequest {
  """
  Urn of the execution request
  """
  urn: String!

  """
  Input provided when creating the Execution Request
  """
  input: ExecutionRequestInput!

  """
  Result of the execution request
  """
  result: ExecutionRequestResult

  """
  Edges extending from this entity
  """
  relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
Input for creating an execution request input
"""
input CreateIngestionExecutionRequestInput {
  """
  Urn of the ingestion source to execute
  """
  ingestionSourceUrn: String!
}

"""
Input for listing DataHub Secrets
"""
input ListSecretsInput {
  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int
}

"""
A referencible secret stored in DataHub's system. Notice that we do not return the actual secret value.
"""
type Secret {
  """
  The urn of the secret
  """
  urn: String!

  """
  The name of the secret
  """
  displayName: String!
}

"""
Input for listing DataHub Secrets
"""
type ListSecretsResult {
  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int

  """
  The total number of results in the result set
  """
  total: Int

  """
  The secrets themselves
  """
  secrets: [Secret!]!
}

"""
The type of an ingestion source
"""
enum IngestionSourceType {
  """
  Ingestion Source that uses a raw recipe as input.
  """
  RECIPE
}

"""
A schedule associated with an Ingestion Source
"""
type IngestionSchedule {
  """
  The start time associated with the schedule
  """
  startTimeMs: Long!

  """
  The end time associated with the schedule
  """
  endTimeMs: Long!

  """
  The cron-formatted interval to execute the ingestion source on
  """
  interval: String!
}

"""
A schedule associated with an Ingestion Source
"""
type IngestionRecipe {
  """
  A json-ified representation of a normal ingestion recipe YML
  """
  json: String!
}

"""
A set of configurations for an Ingestion Source
"""
type IngestionConfig {
  """
  The recipe to use for ingestion
  """
  recipe: IngestionRecipe
}

"""
The runs associated with an Ingestion Source managed by DataHub
"""
type IngestionRun {

  """
  The urn of the execution request associated with the user
  """
  executionRequestUrn: String
}

"""
Runs associated with an ingestion source
"""
type IngestionSourceRuns {
  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int

  """
  The total number of results in the result set
  """
  total: Int

  """
  The execution request objects comprising the result set
  """
  executionRequests: [ExecutionRequest!]!
}

"""
An Ingestion Source Entity
"""
type IngestionSource {
  """
  The primary key of the Ingestion Source
  """
  urn: String!

  """
  The type of the ingestion source
  """
  sourceType: IngestionSourceType!

  """
  The display name of the Ingestion Source
  """
  displayName: String!

  """
  An optional schedule associated with the Ingestion Source
  """
  schedule: IngestionSchedule

  """
  An type-specific set of configurations for the ingestion source
  """
  config: IngestionConfig!

  """
  Runs of the ingestion source
  """
  runs(start: Int, count: Int): IngestionSourceRuns
}

"""
Input arguments for listing Ingestion Sources
"""
input ListIngestionSourcesInput {
  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int
}

"""
Results returned when listing ingestion sources
"""
type ListIngestionSourcesResult {
  """
  The starting offset of the result set
  """
  start: Int!

  """
  The number of results to be returned
  """
  count: Int!

  """
  The total number of results in the result set
  """
  total: Int!

  """
  The Ingestion Sources themselves
  """
  ingestionSources: [IngestionSource!]!
}


"""
Input parameters for creating / updating an Ingestion Source
"""
input UpdateIngestionSourceRecipeInput {
  """
  A raw recipe.yml file represented as a JSON string
  """
  json: String!
}

"""
Input parameters for creating / updating an Ingestion Source
"""
input UpdateIngestionSourceConfigInput {
  """
  Recipe configurations to use with the Ingestion Source
  """
  recipe: UpdateIngestionSourceRecipeInput
}

"""
Input arguments for creating / updating the schedule of an Ingestion Source
"""
input UpdateIngestionSourceScheduleInput {
  """
  The epoch (ms) Date Time when the job should start
  """
  startTimeMs: Long!

  """
  The epoch (ms) Date Time when the job should end
  """
  endTimeMs: Long!

  """
  The cron-formatted inverval describing when the job should be executed
  """
  interval: String!
}

"""
Input arguments for creating / updating an Ingestion Source
"""
input UpdateIngestionSourceInput {
  """
  A name associated with the ingestion source
  """
  displayName: String!

  """
  The type of the Ingestion Source
  """
  type: IngestionSourceType!

  """
  An optional description associated with the ingestion source
  """
  description: String

  """
  An optional schedule for the ingestion source. If not provided, the source is only available for run on-demand.
  """
  schedule: UpdateIngestionSourceScheduleInput

  """
  A set of type-specific ingestion source configurations
  """
  config: UpdateIngestionSourceConfigInput!
}

"""
Input arguments for creating a new Secret
"""
input CreateSecretInput {
  """
  The name of the secret for reference in ingestion recipes
  """
  displayName: String!

  """
  The value of the secret, to be encrypted and stored
  """
  value: String!
}

# Extending the GQL type system to include Long type used for dates
scalar Long

schema {
    query: Query
    mutation: Mutation
}

"""
A top-level Metadata Entity
"""
interface Entity {
    """
    GMS Entity urn
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    List of relationships between the source Entity and some destination entities with a given type(s)
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
A top-level Metadata Entity Type
"""
enum EntityType {
    """
    The Dataset Entity
    """
    DATASET

    """
    The CorpUser Entity
    """
    CORP_USER

    """
    The CorpGroup Entity
    """
    CORP_GROUP

    """
    The DataPlatform Entity
    """
    DATA_PLATFORM

    """
    The Dashboard Entity
    """
    DASHBOARD

    """
    The Chart Entity
    """
    CHART

    """
    The ML Model Entity
    """
    MLMODEL

    """
    The MLModelGroup Entity
    """
    MLMODEL_GROUP

    ""ML Feature Table Entity
    """
    MLFEATURE_TABLE

    """
    The ML Feature Entity
    """
    MLFEATURE

    """
    The ML Primary Key Entity
    """
    MLPRIMARY_KEY

    """
    The Data Flow (or Data Pipeline) Entity,
    """
    DATA_FLOW

    """
    The Data Job (or Data Task) Entity
    """
    DATA_JOB

    """
    The Tag Entity
    """
    TAG

    """
    The Glossary Term Entity
    """
    GLOSSARY_TERM

}

"""
Input for the list relationships field of an Entity
"""
type RelationshipsInput {

  """
  The types of relationships to query for (representing an OR)
  """
  types: [String!]!

  """
  The direction of the relationship, either incoming or outgoing from the source entity
  """
  direction: RelationshipDirection!

  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int

}

"""
A list of relationship information associated with a source Entity
"""
type EntityRelationshipsResult {

  """
  Start offset of the result set
  """
  start: Int

  """
  Number of results in the returned result set
  """
  count: Int

  """
  Total number of results in the result set
  """
  total: Int

  """
  Relationships in the result set
  """
  relationships: [EntityRelationship!]!
}

"""
A relationship between two entities.
TODO - Migrate all entity relationships to this more generic model
"""
type EntityRelationship {
    """
    The type of the relationship
    """
    type: String!

    """
    The direction of the relationship relative to the source entity.
    """
    direction: RelationshipDirection!

    """
    Entity that is related via lineage
    """
    entity: Entity!

    """
    An AuditStamp corresponding to the last modification of this relationship
    """
    created: AuditStamp
}

"""
Direction between a source and destination node.
"""
enum RelationshipDirection {
  """
  A directed edge pointing at the source Entity
  """
  INCOMING,
  """
  A directed edge pointing at the destination Entity
  """
  OUTGOING
}

"""
A versioned aspect, or single group of related metadata, associated with an Entity & having a unique version
"""
interface Aspect {
    """
    The version of the aspect, where 0 represents the latest version
    """
    version: Long
}

"""
An time series aspect, or a group of related metadata associated with an Entity & corresponding to a particular timestamp
"""
interface TimeSeriesAspect {
    """
    The timestamp associated with the time series aspect in milliseconds.
    """
    timestampMillis: Long!
}

"""
Deprecated! This model defines an entity with a set of predefined relationship types. Using 'relationships' field instead.
"""
@deprecated
interface EntityWithRelationships implements Entity {
    """
    GMS Entity urn
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

"""
Types used for fetching DataHub Metadata.
"""
type Query {

    """
    Fetch a CorpUser, representing a DataHub platform user, by primary key (urn)
    """
    corpUser(urn: String!): CorpUser

    """
    Fetch a CorpGroup, representing a DataHub platform group by primary key (urn)
    """
    corpGroup(urn: String!): CorpGroup

    """
    Fetch a Dataset by primary key (urn)
    """
    dataset(urn: String!): Dataset

    """
    Fetch a Dashboard by primary key (urn)
    """
    dashboard(urn: String!): Dashboard

    """
    Fetch a Chart by primary key (urn)
    """
    chart(urn: String!): Chart

    """
    Fetch an ML Model by primary key (urn)
    """
    mlModel(urn: String!): MLModel

    """
    Fetch an ML Model Group by primary key (urn)
    """
    mlModelGroup(urn: String!): MLModelGroup

    """
    Fetch a ML Feature by primary key (urn)
    """
    mlFeature(urn: String!): MLFeature

    """
    Fetch a ML Feature Table by primary key (urn)
    """
    mlFeatureTable(urn: String!): MLFeatureTable

    """
    Fetch a ML Primary Key by primary key (urn)
    """
    mlPrimaryKey(urn: String!): MLPrimaryKey

    """
    Fetch a Data Flow (or Data Pipeline) by primary key (urn)
    """
    dataFlow(urn: String!): DataFlow

    """
    Fetch a Data Job (or Data Task) by primary key (urn)
    """
    dataJob(urn: String!): DataJob

    """
    Fetch a Tag by primary key (urn)
    """
    tag(urn: String!): Tag

    """
    Fetch a Glossary Term by primary key (urn)
    """
    glossaryTerm(urn: String!): GlossaryTerm

    """
    List all DataHub Access Policies
    """
    listPolicies(input: ListPoliciesInput!): ListPoliciesResult
}

type Mutation {
    """
    """
    updateDataset(input: DatasetUpdateInput!): Dataset
    """
    """
    updateChart(input: ChartUpdateInput!): Chart
    """
    """
    updateDashboard(input: DashboardUpdateInput!): Dashboard
    """
    """
    updateDataFlow(input: DataFlowUpdateInput!): DataFlow
    updateDataJob(input: DataJobUpdateInput!): DataJob
    updateTag(input: TagUpdate!): Tag
    """
		Adds a tag to a given entity or subresource
    """
    addTag(input: TagUpdateInput!): Boolean
    """
		Remoes a tag from a given entity or subresource
    """
    removeTag(input: TagUpdateInput!): Boolean
    """
		Adds a term to a given entity or subresource
    """
    addTerm(input: TermUpdateInput!): Boolean
    """
		Removes a term from a given entity or subresource
    """
    removeTerm(input: TermUpdateInput!): Boolean
    """
    Creates a policy and returns the resulting urn.
    """
    createPolicy(input: PolicyInput!): String
    """
    Updates an existing policy and returns the resulting urn
    """
    updatePolicy(urn: String!, input: PolicyInput!): String
    """
    Removes an existing policy and returns the policy urn
    """
    deletePolicy(urn: String!): String
}

input TermUpdateInput {
    termUrn: String!
    targetUrn: String!
    subResourceType: String
    subResource: String
}

input TagUpdateInput {
    tagUrn: String!
    targetUrn: String!
    subResourceType: String
    subResource: String
}

type AuditStamp {
    """
    When the audited action took place
    """
    time: Long!

    """
    Who performed the audited action
    """
    actor: String
}

type Dataset implements EntityWithRelationships & Entity {
    """
    The unique Dataset URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Standardized platform urn where the dataset is defined
    """
    platform: DataPlatform!

    """
    Dataset native name
    """
    name: String!

    """
    Fabric type where dataset belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for dataset
    """
    description: String

    """
    The native format for the data platform
    """
    platformNativeType: PlatformNativeType

    """
    Native Dataset Uri. Uri should not include any environment specific properties
    """
    uri: String

    """
    Tags used for searching dataset
    """
    tags: [String!]!

    """
    A list of platform-specific metadata tuples
    """
    properties: [StringMapEntry!]

    """
    A list of editable platform-specific metadata tuples
    """
    editableProperties: DatasetEditableProperties

    """
    External URL associated with the Dataset
    """
    externalUrl: String

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    The dataset deprecation status
    """
    deprecation: DatasetDeprecation

    """
    References to internal resources related to the dataset
    """
    institutionalMemory: InstitutionalMemory

    """
    Schema metadata of the dataset
    """
    schema: Schema @deprecated(reason: "Use `schemaMetadata`")

    """
    Schema metadata of the dataset
    """
    schemaMetadata(version: Long): SchemaMetadata

    """
    Editable schema metadata of the dataset
    """
    editableSchemaMetadata: EditableSchemaMetadata

    """
    Status of the dataset
    """
    status: Status

    """
    Deprecated! Use 'relationships' field instead.
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use 'relationships' field instead.
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships

    """
    The structured tags associated with the dataset
    """
    globalTags: GlobalTags

    """
    The structured glossary terms associated with the dataset
    """
    glossaryTerms: GlossaryTerms

    """
    Statistics about how this Dataset is used
    """
    usageStats(resource: String!, range: TimeRange): UsageQueryResult

    """
    Profile Stats resource. Get the events in a previous unit of time in descending order.
    If no start / end time are provided, the most recent events will be returned.
    """
    datasetProfiles(startTimeMillis: Long, endTimeMillis: Long, limit: Int): [DatasetProfile!]

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type GlossaryTerm implements Entity {
    """
    Urn of the data platform
    """
    urn: String!

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Name of the data platform
    """
    name: String!

    """
    hierarchicalName of glossary term
    """
    hierarchicalName: String!

    """
    Details of the Glossary Term
    """
    glossaryTermInfo: GlossaryTermInfo!

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type GlossaryTermInfo {
    """
    Name of the glossary term
    """
    definition: String!

    """
    Term Source of the glossary term
    """
    termSource: String!

    """
    Source Ref of the glossary term
    """
    sourceRef: String

    """
    Source Url of the glossary term
    """
    sourceUrl: String

    """
    Properties of the glossary term
    """
    customProperties: [StringMapEntry!]

    """
    Schema definition of glossary term
    """
    rawSchema: String
}


type DataPlatform implements Entity {
    """
    Urn of the data platform
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Name of the data platform
    """
    name: String!

    """
    Display name of the data platform
    """
    displayName: String

    """
    Metadata associated with a dataplatform
    """
    info: DataPlatformInfo

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type DataPlatformInfo {
    """
    The Platform Type
    """
    type: PlatformType!

    """
    Display name associated with the platform
    """
    displayName: String

    """
    The delimiter in the dataset names on the data platform
    """
    datasetNameDelimiter: String!

    """
    A logo URL associated with the platform
    """
    logoUrl: String
}

enum PlatformType {
    """
    Value for a file system
    """
    FILE_SYSTEM

    """
    Value for a key value store
    """
    KEY_VALUE_STORE

    """
    Value for a message broker
    """
    MESSAGE_BROKER

    """
    Value for an object store
    """
    OBJECT_STORE

    """
    Value for an OLAP datastore
    """
    OLAP_DATASTORE

    """
    Value for a query engine
    """
    QUERY_ENGINE

    """
    Value for a relational database
    """
    RELATIONAL_DB

    """
    Value for a search engine
    """
    SEARCH_ENGINE

    """
    Value for other platforms
    """
    OTHERS
}

enum FabricType {
    """
    Designates development fabrics
    """
    DEV

    """
    Designates early-integration (staging) fabrics
    """
    EI

    """
    Designates production fabrics
    """
    PROD

    """
    Designates corporation fabrics
    """
    CORP
}

enum MLFeatureDataType {
    USELESS
    NOMINAL
    ORDINAL
    BINARY
    COUNT
    TIME
    INTERVAL
    IMAGE
    VIDEO
    AUDIO
    TEXT
    MAP
    SEQUENCE
    SET
    CONTINUOUS
    BYTE
    UNKNOWN
}

type DatasetDeprecation {
    """
    Whether the dataset has been deprecated by owner
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!

    """
    The user who will be credited for modifying this deprecation content
    """
    actor: String
}

type InstitutionalMemory {
    """
    List of records that represent the institutional memory (internal documentation) of an entity
    """
    elements: [InstitutionalMemoryMetadata!]!
}

type InstitutionalMemoryMetadata {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String!

    """
    The author of this metadata
    """
    author: CorpUser!

    """
    An AuditStamp corresponding to the creation of this resource
    """
    created: AuditStamp!
}

type SchemaMetadata implements Aspect {
    aspectVersion: Long
    createdAt: Long
    """
    Dataset this schema metadata is associated with
    """
    datasetUrn: String

    """
    Schema name
    """
    name: String!

    """
    Platform this schema metadata is associated with
    """
    platformUrn: String!

    """
    The version of the GMS Schema metadata
    """
    version: Long!

    """
    The cluster this schema metadata is derived from
    """
    cluster: String

    """
    The SHA1 hash of the schema content
    """
    hash: String!

    """
    The native schema in the datasets platform, schemaless if it was not provided
    """
    platformSchema: PlatformSchema
    """
    Client provided a list of fields from value schema
    """
    fields: [SchemaField!]!
    """
    Client provided list of fields that define primary keys to access record
    """
    primaryKeys: [String!]
}

type Schema {
    """
    Dataset this schema metadata is associated with
    """
    datasetUrn: String

    """
    Schema name
    """
    name: String!

    """
    Platform this schema metadata is associated with
    """
    platformUrn: String!

    """
    The version of the GMS Schema metadata
    """
    version: Long!

    """
    The cluster this schema metadata is derived from
    """
    cluster: String

    """
    The SHA1 hash of the schema content
    """
    hash: String!

    """
    The native schema in the datasets platform, schemaless if it was not provided
    """
    platformSchema: PlatformSchema
    """
    Client provided a list of fields from value schema
    """
    fields: [SchemaField!]!
    """
    Client provided list of fields that define primary keys to access record
    """
    primaryKeys: [String!]
}

union PlatformSchema = TableSchema | KeyValueSchema

type TableSchema {
    """
    Raw table schema
    """
    schema: String!
}

type KeyValueSchema {
    """
    Raw key schema
    """
    keySchema: String!
    """
    Raw value schema
    """
    valueSchema: String!
}

type SchemaField {
    """
    Flattened name of the field computed from jsonPath field
    """
    fieldPath: String!
    """
    Flattened name of a field in JSON Path notation
    """
    jsonPath: String
    """
    Indicates if this field is optional or nullable
    """
    nullable: Boolean!
    """
    Description of the field
    """
    description: String
    """
    Platform independent field type of the field
    """
    type: SchemaFieldDataType!
    """
    The native type of the field in the datasets platform as declared by platform schema
    """
    nativeDataType: String
    """
    Whether the field references its own type recursively
    """
    recursive: Boolean!
    """
    Tags associated with the field
    """
    globalTags: GlobalTags
    """
    Glossary terms associated with the field
    """
    glossaryTerms: GlossaryTerms

    isPartOfKey: Boolean
}

type EditableSchemaMetadata {
    editableSchemaFieldInfo: [EditableSchemaFieldInfo!]!
}

type EditableSchemaFieldInfo {
    """
    Flattened name of a field identifying the field the editable info is applied to
    """
    fieldPath: String!

    """
    Edited description of the field
    """
    description: String

    """
    Tags associated with the field
    """
    globalTags: GlobalTags

    """
    Glossary terms associated with the field
    """
    glossaryTerms: GlossaryTerms
}

enum SchemaFieldDataType {
    BOOLEAN
    FIXED
    STRING
    BYTES
    NUMBER
    DATE
    TIME
    ENUM
    NULL
    MAP
    ARRAY
    UNION
    STRUCT
}
type DatasetEditableProperties {
    """
    Description
    """
    description: String
}
type ChartEditableProperties {
    """
    Description
    """
    description: String
}
type DashboardEditableProperties {
    """
    Description
    """
    description: String
}
type DataJobEditableProperties {
    """
    Description
    """
    description: String
}
type DataFlowEditableProperties {
    """
    Description
    """
    description: String
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type EntityRelationshipLegacy {
    """
    Entity that is related via lineage
    """
    entity: EntityWithRelationships

    """
    An AuditStamp corresponding to the last modification of this relationship
    """
    created: AuditStamp
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type UpstreamEntityRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DownstreamEntityRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DataFlowDataJobsRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type UpstreamLineage {
    """
    List of upstream datasets
    """
    upstreams: [RelatedDataset!]!
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DownstreamLineage {
    """
    List of downstream datasets
    """
    downstreams: [RelatedDataset!]!
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type RelatedDataset {
    """
    The upstream dataset the lineage points to
    """
    dataset: Dataset!
    """
    The type of the lineage
    """
    type: DatasetLineageType!
    """
    When the lineage was created
    """
    created: AuditStamp!
}

enum DatasetLineageType {
    """
    Direct copy without modification
    """
    COPY
    """
    Transformed dataset
    """
    TRANSFORMED
    """
    Represents a view defined on the sources
    """
    VIEW
}

type Status {
    """
    Whether the entity is removed or not
    """
    removed: Boolean!
}

enum PlatformNativeType {
    """
    Table
    """
    TABLE

    """
    View
    """
    VIEW

    """
    Directory in file system
    """
    DIRECTORY

    """
    Stream
    """
    STREAM

    """
    Bucket in key value store
    """
    BUCKET
}

type StringMapEntry {
    key: String!
    value: String
}

enum OwnershipSourceType {
    """
    Auditing system or audit logs
    """
    AUDIT
    """
    Database, e.g. GRANTS table
    """
    DATABASE
    """
    File system, e.g. file/directory owner
    """
    FILE_SYSTEM
    """
    Issue tracking system, e.g. Jira
    """
    ISSUE_TRACKING_SYSTEM
    """
    Manually provided by a user
    """
    MANUAL
    """
    Other ownership-like service, e.g. Nuage, ACL service etc
    """
    SERVICE
    """
    SCM system, e.g. GIT, SVN
    """
    SOURCE_CONTROL
    """
    Other sources
    """
    OTHER
}

type OwnershipSource {
    """
    The type of the source
    """
    type: OwnershipSourceType!

    """
    A reference URL for the source
    """
    url: String
}

enum OwnershipType {
    """
    A person or group that is in charge of developing the code
    """
    DEVELOPER

    """
    A person or group that is owning the data
    """
    DATAOWNER

    """
    A person or a group that overseas the operation, e.g. a DBA or SRE.
    """
    DELEGATE

    """
    A person, group, or service that produces/generates the data
    """
    PRODUCER

    """
    A person, group, or service that consumes the data
    """
    CONSUMER

    """
    A person or a group that has direct business interest
    """
    STAKEHOLDER
}

type CorpUser implements Entity {
    """
    The unique user URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Username of the corp user
    """
    username: String!

    """
    Readable info about the corp user
    """
    info: CorpUserInfo

    """
    Writable info about the corp user
    """
    editableInfo: CorpUserEditableInfo

    """
    The structured tags associated with the user
    """
    globalTags: GlobalTags

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type CorpUserInfo {
    """
    Whether the user is active
    """
    active: Boolean!

    """
    Display name of the user
    """
    displayName: String

    """
    Email address of the user
    """
    email: String

    """
    Title of the user
    """
    title: String

    """
    Direct manager of the user
    """
    manager: CorpUser

    """
    department id the user belong to
    """
    departmentId: Long

    """
    department name this user belong to
    """
    departmentName: String

    """
    first name of the user
    """
    firstName: String

    """
    last name of the user
    """
    lastName: String

    """
    Common name of this user, format is firstName plus lastName
    """
    fullName: String

    """
    two uppercase letters country code
    """
    countryCode: String
}

type CorpUserEditableInfo {
    """
    About me section of the user
    """
    aboutMe: String

    """
    Teams that the user belongs to
    """
    teams: [String!]

    """
    Skills that the user possesses
    """
    skills: [String!]

    """
    A URL which points to a picture which user wants to set as a profile photo
    """
    pictureLink: String
}

type CorpGroup implements Entity {
    """
    The unique user URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Group name e.g. wherehows-dev, ask_metadata
    """
    name: String!

    """
    Information of the corp group
    """
    info: CorpGroupInfo

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type CorpGroupInfo {

    """
    The name to display when rendering the group
    """
    displayName: String

    """
    The description provided for the group.
    """
    description: String

    """
    email of this group
    """
    email: String

    """
    owners of this group
    """
    admins: [CorpUser!]

    """
    List of ldap urn in this group.
    """
    members: [CorpUser!]

    """
    List of groups in this group.
    """
    groups: [String!]
}

union OwnerType = CorpUser | CorpGroup

type Owner {
    """
    Owner object
    """
    owner: OwnerType!

    """
    The type of the ownership
    """
    type: OwnershipType!

    """
    Source information for the ownership
    """
    source: OwnershipSource
}

type Ownership {
    """
    List of owners of the entity
    """
    owners: [Owner!]

    """
      Audit stamp containing who last modified the record and when
    """
    lastModified: AuditStamp!
}

type Tag implements Entity {
    urn: String!
    """
    GMS Entity Type
    """
    type: EntityType!
    name: String!

    """
    Description of the tag
    """
    description: String

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type TagAssociation {
    tag: Tag!
}

type GlobalTags {
    tags: [TagAssociation!]
}

type VersionTag {
    versionTag: String
}

type GlossaryTerms {
    terms: [GlossaryTermAssociation!]
}

type GlossaryTermAssociation {
    term: GlossaryTerm!
}

input ChartUpdateInput {
    """
    The chart urn
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: ChartEditablePropertiesUpdate
}

input DashboardUpdateInput {
    """
    The dashboard urn
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DashboardEditablePropertiesUpdate
}

input DataFlowUpdateInput {
    """
    The dataFlow urn
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DataFlowEditablePropertiesUpdate
}

input DataJobUpdateInput {
    """
    The dataJob urn
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DataJobEditablePropertiesUpdate
}

input DatasetUpdateInput {
    """
    The dataset urn
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to deprecation status
    """
    deprecation: DatasetDeprecationUpdate

    """
    Update to institutional memory, ie documentation
    """
    institutionalMemory: InstitutionalMemoryUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable schema metadata of the dataset
    """
    editableSchemaMetadata: EditableSchemaMetadataUpdate

    """
    Update to editable properties
    """
    editableProperties: DatasetEditablePropertiesUpdate
}

input EditableSchemaMetadataUpdate {
    editableSchemaFieldInfo: [EditableSchemaFieldInfoUpdate!]!
}

input EditableSchemaFieldInfoUpdate {
    """
    Flattened name of a field identifying the field the editable info is applied to
    """
    fieldPath: String!

    """
    Edited description of the field
    """
    description: String

    """
    Tags associated with the field
    """
    globalTags: GlobalTagsUpdate
}

input DatasetEditablePropertiesUpdate {
    """
    Description
    """
    description: String!
}

input ChartEditablePropertiesUpdate {
    """
    Description
    """
    description: String!
}

input DashboardEditablePropertiesUpdate {
    """
    Description
    """
    description: String!
}

input DataJobEditablePropertiesUpdate {
    """
    Description
    """
    description: String!
}

input DataFlowEditablePropertiesUpdate {
    """
    Description
    """
    description: String!
}

input GlobalTagsUpdate {
    tags: [TagAssociationUpdate!]
}

input TagAssociationUpdate {
    tag: TagUpdate!
}

input TagUpdate {
    urn: String!

    name: String!

    """
    Description of the tag
    """
    description: String

    """
    Ownership metadata of the tag
    """
    ownership: OwnershipUpdate
}

input OwnershipUpdate {
    """
    The list of owners
    """
   owners: [OwnerUpdate!]!
}

input OwnerUpdate {
    """
    The owner URN, eg urn:li:corpuser:1
    """
    owner: String!

    """
    The owner role type
    """
    type: OwnershipType!
}

input DatasetDeprecationUpdate {
    """
    Whether the dataset is deprecated
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!
}

input InstitutionalMemoryUpdate {
    """
    The individual references in the institutional memory
    """
    elements: [InstitutionalMemoryMetadataUpdate!]!
}

input InstitutionalMemoryMetadataUpdate {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String

    """
    The corp user urn of the author of the metadata
    """
    author: String!

    """
    The time at which this metadata was created
    """
    createdAt: Long
}

type Dashboard implements EntityWithRelationships & Entity {
    """
    The unique dashboard URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    The dashboard tool name
    """
    tool: String!

    """
    An id unique within the dashboard tool
    """
    dashboardId: String!

    """
    Info about the dashboard
    """
    info: DashboardInfo

    """
    Ownership metadata of the dashboard
    """
    ownership: Ownership

    """
    Status metadata of the dashboard
    """
    status: Status

    """
    The structured tags associated with the dashboard
    """
    globalTags: GlobalTags

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Editable properties
    """
    editableProperties: DashboardEditableProperties

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type DashboardInfo {
    """
    Name of the dashboard
    """
    name: String!

    """
    Description of the dashboard
    """
    description: String

    """
    Charts that comprise the dashboard
    """
    charts: [Chart!]!

    """
    Native platform URL of the dashboard
    """
    externalUrl: String

    """
    Access level for the dashboard
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this dashboard last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this dashboard
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this dashboard
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this dashboard
    """
    deleted: AuditStamp
}

enum AccessLevel {
    """
    Publicly available
    """
    PUBLIC

    """
    Restricted to a subset of viewers
    """
    PRIVATE
}

type Chart implements EntityWithRelationships & Entity {
    """
    The unique user URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    The chart tool name
    """
    tool: String!

    """
    An id unique within the charting tool
    """
    chartId: String!

    """
    Info about the chart
    """
    info: ChartInfo

    """
    Info about the query which is used to render the chart
    """
    query: ChartQuery

    """
    Ownership metadata of the chart
    """
    ownership: Ownership

    """
    Status metadata of the chart
    """
    status: Status

    """
    The structured tags associated with the chart
    """
    globalTags: GlobalTags

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Editable properties
    """
    editableProperties: ChartEditableProperties

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type ChartInfo {
    """
    Name of the chart
    """
    name: String!

    """
    Description of the chart
    """
    description: String

    """
    Data sources for the chart
    """
    inputs: [Dataset!]

    """
    Native platform URL of the chart
    """
    externalUrl: String

    """
    Access level for the chart
    """
    type: ChartType

    """
    Access level for the chart
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this chart last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this chart
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this chart
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this chart
    """
    deleted: AuditStamp
}

enum ChartType {
    """
    Bar graph
    """
    BAR

    """
    Pie chart
    """
    PIE

    """
    Scatter plot
    """
    SCATTER

    """
    Table
    """
    TABLE

    """
    Markdown formatted text
    """
    TEXT

    LINE
    AREA
    HISTOGRAM
    BOX_PLOT
}

type ChartQuery {
    """
    Raw query to build a chart from input datasets
    """
    rawQuery: String!

    """
    The type of the chart query
    """
    type: ChartQueryType!
}

enum ChartQueryType {
    """
    Standard ANSI SQL
    """
    SQL

    """
    LookML
    """
    LOOKML
}

type MLModel implements EntityWithRelationships & Entity {
    """
    The unique mlmodel URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    MLModel native name
    """
    name: String!

    """
    Standardized platform urn where the MLModel is defined
    """
    platform: DataPlatform!

    """
    Fabric type where mlmodel belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for mlmodel
    """
    description: String
    """
    Tags used for searching mlmodel
    """
    tags: [String!]!
    """

    gloablTags for mlmodel
    """
    globalTags: GlobalTags

    """
    Ownership metadata of the mlmodel
    """
    ownership: Ownership

    """
    ModelProperties metadata of the mlmodel
    """
    properties: MLModelProperties

    """
    Intended use of the mlmodel
    """
    intendedUse: IntendedUse

    """
    Factors metadata of the mlmodel
    """
    factorPrompts: MLModelFactorPrompts

    """
    Metrics metadata of the mlmodel
    """
    metrics: Metrics

    """
    Evaluation Data of the mlmodel
    """
    evaluationData: [BaseData!]

    """
    Training Data of the mlmodel
    """
    trainingData: [BaseData!]

    """
    Quantitative Analyses of the mlmodel
    """
    quantitativeAnalyses: QuantitativeAnalyses

    """
    Ethical Considerations of the mlmodel
    """
    ethicalConsiderations: EthicalConsiderations

    """
    Caveats and Recommendations of the mlmodel
    """
    caveatsAndRecommendations: CaveatsAndRecommendations

    """
    References to internal resources related to the mlmodel
    """
    institutionalMemory: InstitutionalMemory

    """
    Source Code
    """
    sourceCode: SourceCode

    """
    Status metadata of the mlmodel
    """
    status: Status

    """
    Cost Aspect of the mlmodel
    """
    cost: Cost

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type MLModelGroup implements EntityWithRelationships & Entity {

    """
    The unique mlmodel URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    MLModelGroup name
    """
    name: String!

    """
    Standardized platform urn where the MLModelGroup is defined
    """
    platform: DataPlatform!

    """
    Fabric type where MLModelGroup belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for MLModelGroup
    """
    description: String

    properties: MLModelGroupProperties

    """
    Ownership metadata of the MLModelGroup
    """
    ownership: Ownership

    """
    Status metadata of the MLFeature
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type MLModelGroupProperties {

    description: String

    createdAt: Long

    version: VersionTag
}

type MLFeature implements Entity {

    """
    The unique MLFeature URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    MLFeature name
    """
    name: String!

    """
    MLFeature featureNamespace
    """
    featureNamespace: String!

    """
    MLFeature description
    """
    description: String

    """
    MLFeature data type
    """
    dataType: MLFeatureDataType

    """
    Ownership metadata of the MLFeature
    """
    ownership: Ownership

    """
    ModelProperties metadata of the MLFeature
    """
    featureProperties: MLFeatureProperties

    """
    References to internal resources related to the MLFeature
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLFeature
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type MLHyperParam {
    name: String

    description: String

    value: String

    createdAt: Long
}

type MLMetric {
    name: String

    description: String

    value: String

    createdAt: Long
}

type MLModelProperties {

    description: String

    date: Long

    version: String

    type: String

    hyperParameters: HyperParameterMap

    hyperParams:  [MLHyperParam]

    trainingMetrics: [MLMetric]

    mlFeatures: [String!]

    tags: [String!]

    groups: [MLModelGroup]

    customProperties: [StringMapEntry!]
}

type MLFeatureProperties {

description: String

    dataType: MLFeatureDataType

    version: VersionTag

    sources: [Dataset]
}

type MLPrimaryKey implements Entity {

    """
    The unique MLPrimaryKey URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    MLPrimaryKey name
    """
    name: String!

    """
    MLPrimaryKey featureNamespace
    """
    featureNamespace: String!

    """
    MLPrimaryKey description
    """
    description: String

    """
    MLPrimaryKey data type
    """
    dataType: MLFeatureDataType

    """
    MLPrimaryKeyProperties
    """
    primaryKeyProperties: MLPrimaryKeyProperties

    """
    Ownership metadata of the MLPrimaryKey
    """
    ownership: Ownership

    """
    References to internal resources related to the MLPrimaryKey
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLPrimaryKey
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type MLPrimaryKeyProperties {

    description: String

    dataType: MLFeatureDataType

    version: VersionTag

    sources: [Dataset]
}

type MLFeatureTable implements Entity {

    """
    The unique MLFeatureTable URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    MLFeatureTable name
    """
    name: String!

    """
    Standardized platform urn where the MLFeatureTable is defined
    """
    platform: DataPlatform!

    """
    MLFeatureTable description
    """
    description: String

    """
    Ownership metadata of the MLFeatureTable
    """
    ownership: Ownership

    """
    ModelProperties metadata of the MLFeature
    """
    featureTableProperties: MLFeatureTableProperties

    """
    References to internal resources related to the MLFeature
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLFeatureTable
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type MLFeatureTableProperties {

    description: String

    mlFeatures: [MLFeature]

    mlPrimaryKeys: [MLPrimaryKey]
}

type HyperParameterMap {
    key: String!
    value: HyperParameterValueType!
}

type StringBox {
    stringValue: String!
}

type IntBox {
    intValue: Int!
}

type FloatBox {
    floatValue: Float!
}

type BooleanBox {
    booleanValue: Boolean!
}

union HyperParameterValueType = StringBox | IntBox | FloatBox | BooleanBox

type MLModelFactorPrompts {

    """
    What are foreseeable salient factors for which MLModel performance may vary, and how were these determined?
    """
    relevantFactors: [MLModelFactors!]

    """
    Which factors are being reported, and why were these chosen?
    """
    evaluationFactors: [MLModelFactors!]
}

type MLModelFactors {

    """
    Distinct categories with similar characteristics that are present in the evaluation data instances.
    """
    groups: [String!]

    """
    Instrumentation used for MLModel
    """
    instrumentation: [String!]

    """
    Environment in which the MLModel is deployed.
    """
    environment: [String!]
}

type QuantitativeAnalyses {
    """
    Link to a dashboard with results showing how the model performed with respect to each factor
    """
    unitaryResults: ResultsType

    """
    Link to a dashboard with results showing how the model performed with respect to the intersection of evaluated factors?
    """
    intersectionalResults: ResultsType
}

union ResultsType = StringBox

type CaveatsAndRecommendations {

    """
    Caveats on using this MLModel
    """
    caveats: CaveatDetails

    """
    Recommendations on where this MLModel should be used.
    """
    recommendations: String

    """
    Ideal characteristics of an evaluation dataset for this MLModel
    """
    idealDatasetCharacteristics: [String!]
}
type CaveatDetails {

    """
    Did the results suggest any further testing?
    """
    needsFurtherTesting: Boolean

    """
    Caveat Description
    """
    caveatDescription: String

    """
    Relevant groups that were not represented in the evaluation dataset?
    """
    groupsNotRepresented: [String!]
}

type EthicalConsiderations {

    """
    Does the model use any sensitive data (e.g., protected classes)?
    """
    data: [String!]

    """
    Is the model intended to inform decisions about matters central to human life or flourishing – e.g., health or safety? Or could it be used in such a way?
    """
    humanLife: [String!]

    """
    What risk mitigation strategies were used during model development?
    """
    mitigations: [String!]

    """
    What risks may be present in model usage? Try to identify the potential recipients, likelihood, and magnitude of harms. If these cannot be determined, note that they were considered but remain unknown.
    """
    risksAndHarms: [String!]

    """
    Are there any known model use cases that are especially fraught? This may connect directly to the intended use section
    """
    useCases: [String!]
}

type BaseData {

    """
    Dataset used for the Training/Evaluation of the MLModel
    """
    dataset: String!

    """
    Motivation to pick these datasets
    """
    motivation: String

    """
    Details of Data Proprocessing
    """
    preProcessing: [String!]
}

type Metrics {

    """
    Measures of MLModel performance
    """
    performanceMeasures: [String!]

    """
    Decision Thresholds used (if any)?
    """
    decisionThreshold: [String!]

}

type IntendedUse {

    """
    Primary Use cases for the model.
    """
    primaryUses: [String!]

    """
    Primary Intended Users
    """
    primaryUsers: [IntendedUserType!]

    """
    Out of scope uses of the MLModel
    """
    outOfScopeUses: [String!]
}

enum IntendedUserType {

    """
    Developed for Enterprise Users
    """
    ENTERPRISE

    """
    Developed for Hobbyists
    """
    HOBBY

    """
    Developed for Entertainment Purposes
    """
    ENTERTAINMENT
}

type SourceCode {
    """
    Source Code along with types
    """
    sourceCode: [SourceCodeUrl!]
}

type SourceCodeUrl {

    """
    Source Code Url Types
    """
    type: SourceCodeUrlType!

    """
    Source Code Url
    """
    sourceCodeUrl: String!
}

enum SourceCodeUrlType {

    """
    MLModel Source Code
    """
    ML_MODEL_SOURCE_CODE

    """
    Training Pipeline Source Code
    """
    TRAINING_PIPELINE_SOURCE_CODE

    """
    Evaluation Pipeline Source Code
    """
    EVALUATION_PIPELINE_SOURCE_CODE
}

type Cost {

    """
    Type of Cost Code
    """
    costType: CostType!

    """
    Code to which the Cost of this entity should be attributed to i.e. organizational cost ID
    """
    costValue: CostValue!
}

type CostValue {

    """
    Organizational Cost ID
    """
    costId: Float

    """
    Organizational Cost Code
    """
    costCode: String
}

enum CostType {

    """
    Org Cost Type to which the Cost of this entity should be attributed to
    """
    ORG_COST_TYPE
}

type Deprecation {
    """
    Whether the entity has been deprecated by owner
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this entity
    """
    decommissionTime: Long

    """
    Additional information about the entity deprecation plan
    """
    note: String!

    """
    The user who will be credited for modifying this deprecation content
    """
    actor: String
}

type DataFlow implements Entity {
    """
    The unique flow URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    Workflow orchestrator ex: Azkaban, Airflow
    """
    orchestrator: String!

    """
    Id of the flow
    """
    flowId: String!

    """
    Cluster of the flow
    """
    cluster: String!

    """
    Information about a Data processing flow
    """
    info: DataFlowInfo

    """
    Ownership metadata of the flow
    """
    ownership: Ownership

    """
    The structured tags associated with the dataflow
    """
    globalTags: GlobalTags

    """
    Status metadata of the dataflow
    """
    status: Status

    """
    DataJobs
    """
    dataJobs: DataFlowDataJobsRelationships

    """
    Editable properties
    """
    editableProperties: DataFlowEditableProperties

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type DataFlowInfo {
    """
    Name of the flow
    """
    name: String!

    """
    Description of the flow
    """
    description: String

    """
    Optional project/namespace associated with the flow
    """
    project: String

    """
    External URL associated with the DataFlow
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

type DataJob implements EntityWithRelationships & Entity {
    """
    The unique job URN
    """
    urn: String!

    """
    GMS Entity Type
    """
    type: EntityType!

    """
    The associated data flow
    """
    dataFlow: DataFlow

    """
    Id of the job
    """
    jobId: String!

    """
    Information about a Data processing job
    """
    info: DataJobInfo

    """
    Ownership metadata of the job
    """
    ownership: Ownership

    """
    Information about the inputs and outputs of a Data processing job
    """
    inputOutput: DataJobInputOutput

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    The structured tags associated with the DataJob
    """
    globalTags: GlobalTags

    """
    Status metadata of the DataJob
    """
    status: Status

    """
    Editable properties
    """
    editableProperties: DataJobEditableProperties

    """
    Edges extending from this entity.
    """
    relationships(types: [String!]!, direction: RelationshipDirection!, start: Int, count: Int): EntityRelationshipsResult
}

type DataJobInfo {
    """
    Job name
    """
    name: String!

    """
    Job description
    """
    description: String

    """
    External URL associated with the DataJob
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

type DataJobInputOutput {
    """
    Input datasets produced by the data job during processing
    """
    inputDatasets: [Dataset!]

    """
    Output datasets produced by the data job during processing
    """
    outputDatasets: [Dataset!]

    """
    Input datajobs that this data job depends on
    """
    inputDatajobs: [DataJob!]

}

type UserUsageCounts {
    user: CorpUser
    count: Int
    userEmail: String
}

type UsageQueryResult {
    buckets: [UsageAggregation]
    aggregations: UsageQueryResultAggregations
}

type UsageQueryResultAggregations {
    uniqueUserCount: Int
    users: [UserUsageCounts]
    fields: [FieldUsageCounts]
    totalSqlQueries: Int
}

type UsageAggregationMetrics {
    uniqueUserCount: Int
    users: [UserUsageCounts]
    totalSqlQueries: Int
    topSqlQueries: [String]
    fields: [FieldUsageCounts]
}

type UsageAggregation {
    bucket: Long
    duration: WindowDuration
    resource: String
    metrics: UsageAggregationMetrics
}

type FieldUsageCounts {
    fieldName: String
    count: Int
}

enum WindowDuration {
    DAY
    WEEK
    MONTH
    YEAR
}

enum TimeRange {
    DAY
    WEEK
    MONTH
    QUARTER
    YEAR
    ALL
}

type DatasetFieldProfile {
	fieldPath: String!
	uniqueCount: Long
	uniqueProportion: Float
	nullCount: Long
	nullProportion: Float
	min: String
	max: String
	mean: String
	median: String
	stdev: String
	sampleValues: [String!]
}

type TimeWindow {
  startTimeMillis: Long!
  durationMillis: Long!
}

type PartitionSpec {
  partition: String!
  timePartition: TimeWindow
}

type DatasetProfile implements TimeSeriesAspect {
  timestampMillis: Long!
  rowCount: Long
  columnCount: Long
  fieldProfiles: [DatasetFieldProfile!]
  partitionSpec: PartitionSpec
}

enum PolicyType {
  METADATA
  PLATFORM
}

enum PolicyState {
  DRAFT
  ACTIVE
  INACTIVE
}

type Policy {
  urn: String!
  type: PolicyType!
  name: String!
  state: PolicyState!
  description: String
  resources: ResourceFilter
  privileges: [String!]!
  actors: ActorFilter!
  editable: Boolean!
}

type ResourceFilter {
  """
  The type of the resource the policy should apply to. Not required because in the future we want to support
  filtering by type OR by domain
  """
  type: String!

  """
  A list of specific resource urns to apply the filter to
  """
  resources: [String!]

  """
  Whether of not to apply the filter to all resources of the type
  """
  allResources: Boolean!
}

type ActorFilter {
  """
  A specific set of users to apply the policy to (disjunctive)
  """
  users: [String!]

  """
  A specific set of groups to apply the policy to (disjunctive)
  """
  groups: [String!]

  """
  Whether the filter should return true for owners of a particular resource.
  Only applies to policies of type 'Metadata', which have a resource associated with them.
  """
  resourceOwners: Boolean!

  """
  Whether the filter should apply to all users.
  """
  allUsers: Boolean!

  """
  Whether the filter should apply to all groups.
  """
  allGroups: Boolean!
}

input PolicyInput {
  type: PolicyType!
  name: String!
  state: PolicyState!
  description: String
  resources: ResourceFilterInput
  privileges: [String!]!
  actors: ActorFilterInput!
}

input ResourceFilterInput {
  """
  The type of the resource the policy should apply to. Not required because in the future we want to support
  filtering by type OR by domain
  """
  type: String!

  """
  A list of specific resource urns to apply the filter to
  """
  resources: [String!]

  """
  Whether of not to apply the filter to all resources of the type
  """
  allResources: Boolean!
}

input ActorFilterInput {
  """
  A specific set of users to apply the policy to (disjunctive)
  """
  users: [String!]

  """
  A specific set of groups to apply the policy to (disjunctive)
  """
  groups: [String!]

  """
  Whether the filter should return true for owners of a particular resource.
  Only applies to policies of type 'Metadata', which have a resource associated with them.
  """
  resourceOwners: Boolean!

  """
  Whether the filter should apply to all users.
  """
  allUsers: Boolean!

  """
  Whether the filter should apply to all groups.
  """
  allGroups: Boolean!
}

input ListPoliciesInput {
  start: Int
  count: Int
}

type ListPoliciesResult {
  start: Int!
  count: Int!
  total: Int!
  policies: [Policy!]!
}
# Extending the GQL type system to include Long type used for dates
scalar Long

schema {
    query: Query
    mutation: Mutation
}

"""
Root type used for fetching DataHub Metadata.
Coming soon: listEntity queries for listing all entities of a given type.
"""
type Query {
    """
    Fetch a CorpUser, representing a DataHub platform user, by primary key (urn)
    """
    corpUser(urn: String!): CorpUser

    """
    Fetch a CorpGroup, representing a DataHub platform group by primary key (urn)
    """
    corpGroup(urn: String!): CorpGroup

    """
    Fetch a Dataset by primary key (urn)
    """
    dataset(urn: String!): Dataset

    """
    Fetch a Dashboard by primary key (urn)
    """
    dashboard(urn: String!): Dashboard

    """
    Fetch a Chart by primary key (urn)
    """
    chart(urn: String!): Chart

    """
    Fetch an ML Model by primary key (urn)
    """
    mlModel(urn: String!): MLModel

    """
    Fetch an ML Model Group by primary key (urn)
    """
    mlModelGroup(urn: String!): MLModelGroup

    """
    Fetch a ML Feature by primary key (urn)
    """
    mlFeature(urn: String!): MLFeature

    """
    Fetch a ML Feature Table by primary key (urn)
    """
    mlFeatureTable(urn: String!): MLFeatureTable

    """
    Fetch a ML Primary Key by primary key (urn)
    """
    mlPrimaryKey(urn: String!): MLPrimaryKey

    """
    Fetch a Data Flow (or Data Pipeline) by primary key (urn)
    """
    dataFlow(urn: String!): DataFlow

    """
    Fetch a Data Job (or Data Task) by primary key (urn)
    """
    dataJob(urn: String!): DataJob

    """
    Fetch a Tag by primary key (urn)
    """
    tag(urn: String!): Tag

    """
    Fetch a Glossary Term by primary key (urn)
    """
    glossaryTerm(urn: String!): GlossaryTerm

    """
    List all DataHub Access Policies
    """
    listPolicies(input: ListPoliciesInput!): ListPoliciesResult
}

"""
Root type used for updating DataHub Metadata.
Coming soon: createEntity, addOwner, removeOwner mutations.
"""
type Mutation {
    """
    Update the metadata about a particular Dataset
    """
    updateDataset(input: DatasetUpdateInput!): Dataset

    """
    Update the metadata about a particular Chart
    """
    updateChart(input: ChartUpdateInput!): Chart

    """
    Update the metadata about a particular Dashboard
    """
    updateDashboard(input: DashboardUpdateInput!): Dashboard

    """
    Update the metadata about a particular Data Flow (Pipeline)
    """
    updateDataFlow(input: DataFlowUpdateInput!): DataFlow

    """
    Update the metadata about a particular Data Job (Task)
    """
    updateDataJob(input: DataJobUpdateInput!): DataJob

    """
    Update the information about a particular Entity Tag
    """
    updateTag(input: TagUpdate!): Tag

    """
    Create a policy and returns the resulting urn.
    """
    createPolicy(input: PolicyInput!): String

    """
    Update an existing policy and returns the resulting urn
    """
    updatePolicy(urn: String!, input: PolicyInput!): String

    """
    Remove an existing policy and returns the policy urn
    """
    deletePolicy(urn: String!): String

    """
		Add a tag to a particular Entity or subresource
    """
    addTag(input: TagUpdateInput!): Boolean

    """
		Remove a tag from a particular Entity or subresource
    """
    removeTag(input: TagUpdateInput!): Boolean

    """
		Add a glossary term to a particular Entity or subresource
    """
    addTerm(input: TermUpdateInput!): Boolean

    """
		Remove a glossary term from a particular Entity or subresource
    """
    removeTerm(input: TermUpdateInput!): Boolean
}

"""
A top-level Metadata Entity
"""
interface Entity {
    """
    A primary key of the MetadatamEntity
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    List of relationships between the source Entity and some destination entities with a given type(s)
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
A top-level Metadata Entity Type
"""
enum EntityType {
    """
    The Dataset Entity
    """
    DATASET

    """
    The CorpUser Entity
    """
    CORP_USER

    """
    The CorpGroup Entity
    """
    CORP_GROUP

    """
    The DataPlatform Entity
    """
    DATA_PLATFORM

    """
    The Dashboard Entity
    """
    DASHBOARD

    """
    The Chart Entity
    """
    CHART

    """
    The Data Flow (or Data Pipeline) Entity,
    """
    DATA_FLOW

    """
    The Data Job (or Data Task) Entity
    """
    DATA_JOB

    """
    The Tag Entity
    """
    TAG

    """
    The Glossary Term Entity
    """
    GLOSSARY_TERM

    """
    The ML Model Entity
    """
    MLMODEL

    """
    The MLModelGroup Entity
    """
    MLMODEL_GROUP

    ""ML Feature Table Entity
    """
    MLFEATURE_TABLE

    """
    The ML Feature Entity
    """
    MLFEATURE

    """
    The ML Primary Key Entity
    """
    MLPRIMARY_KEY
}

"""
Input for the list relationships field of an Entity
"""
type RelationshipsInput {

  """
  The types of relationships to query for (representing an OR)
  """
  types: [String!]!

  """
  The direction of the relationship, either incoming or outgoing from the source entity
  """
  direction: RelationshipDirection!

  """
  The starting offset of the result set
  """
  start: Int

  """
  The number of results to be returned
  """
  count: Int

}

"""
A list of relationship information associated with a source Entity
"""
type EntityRelationshipsResult {

  """
  Start offset of the result set
  """
  start: Int

  """
  Number of results in the returned result set
  """
  count: Int

  """
  Total number of results in the result set
  """
  total: Int

  """
  Relationships in the result set
  """
  relationships: [EntityRelationship!]!
}

"""
A relationship between two entities.
TODO - Migrate all entity relationships to this more generic model
"""
type EntityRelationship {
    """
    The type of the relationship
    """
    type: String!

    """
    The direction of the relationship relative to the source entity.
    """
    direction: RelationshipDirection!

    """
    Entity that is related via lineage
    """
    entity: Entity!

    """
    An AuditStamp corresponding to the last modification of this relationship
    """
    created: AuditStamp
}

"""
Direction between a source and destination node.
"""
enum RelationshipDirection {
  """
  A directed edge pointing at the source Entity
  """
  INCOMING,
  """
  A directed edge pointing at the destination Entity
  """
  OUTGOING
}

"""
A versioned aspect, or single group of related metadata, associated with an Entity & having a unique version
"""
interface Aspect {
    """
    The version of the aspect, where 0 represents the latest version
    """
    version: Long
}

"""
A time series aspect, or a group of related metadata associated with an Entity & corresponding to a particular timestamp
"""
interface TimeSeriesAspect {
    """
    The timestamp associated with the time series aspect in milliseconds.
    """
    timestampMillis: Long!
}

"""
Deprecated! This model defines an entity with a set of predefined relationship types. Using 'relationships' field instead.
"""
@deprecated
interface EntityWithRelationships implements Entity {
    """
    A primary key (urn) associated with the Metadata Entity
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Entities downstream of the given entity
    """
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
A Dataset entity, which encompasses Relational Tables, Document store collections,
streaming topics, and other sets of data having an independent lifecycle
"""
type Dataset implements EntityWithRelationships & Entity {
    """
    The primary key of the Dataset
    """
    urn: String!

    """
    The standard Entity Type
    """
    type: EntityType!

    """
    Standardized platform urn where the dataset is defined
    """
    platform: DataPlatform!

    """
    The Dataset display name
    """
    name: String!

    """
    Deprecated! Use the properties field instead.
    Environment in which the dataset belongs to or where it was generated
    Note that this field will soon be deprecated in favor of a more standardized concept of Environment
    """
    @deprecated
    origin: FabricType!

    """
    Deprecated! Use the properties field instead.
    Read-only technical description for dataset
    """
    @deprecated
    description: String

    """
    Deprecated! Do not use this field.
    The logical type of the dataset (Table, stream, etc)
    """
    @deprecated
    platformNativeType: PlatformNativeType

    """
    Deprecated! Use externalUrl instead.
    Native Dataset Uri. Uri should not include any environment specific properties
    """
    @deprecated
    uri: String

    """
    An additional set of read-only properties
    """
    properties: DatasetProperties

    """
    An additional set of of read-write properties
    """
    editableProperties: DatasetEditableProperties

    """
    Deprecated! Use properties field instead.
    External URL associated with the Dataset
    """
    @deprecated
    externalUrl: String

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    The deprecation status
    """
    deprecation: Deprecation

    """
    References to internal resources related to the dataset
    """
    institutionalMemory: InstitutionalMemory

    """
    Schema metadata of the dataset
    """
    schema: Schema @deprecated(reason: "Use `schemaMetadata`")

    """
    Schema metadata of the dataset, available by version number
    """
    schemaMetadata(version: Long): SchemaMetadata

    """
    Editable schema metadata of the dataset
    """
    editableSchemaMetadata: EditableSchemaMetadata

    """
    Status of the Dataset
    """
    status: Status

    """
    Deprecated! Use 'relationships' field instead.
    Entities upstream of the given entity
    """
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use 'relationships' field instead.
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships

    """
    Deprecated! Use tags field instead.
    The structured tags associated with the dataset
    """
    @deprecated
    globalTags: GlobalTags

    """
    Tags used for searching dataset
    """
    tags: GlobalTags

    """
    The structured glossary terms associated with the dataset
    """
    glossaryTerms: GlossaryTerms

    """
    Statistics about how this Dataset is used
    """
    usageStats(resource: String!, range: TimeRange): UsageQueryResult

    """
    Profile Stats resource. Get the events in a previous unit of time in descending order.
    If no start / end time are provided, the most recent events will be returned.
    """
    datasetProfiles(startTimeMillis: Long, endTimeMillis: Long, limit: Int): [DatasetProfile!]

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
A Glossary Term, or a node in a Business Glossary representing a standardized domain
data type.
"""
type GlossaryTerm implements Entity {
    """
    The primary key of the glossary term
    """
    urn: String!

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    Display name of the glossary term
    """
    name: String!

    """
    hierarchicalName of glossary term
    """
    hierarchicalName: String!

    """
    Additional read-only properties associated with the Glossary Term
    """
    properties: GlossaryTermProperties

    """
    Deprecated! Use properties field instead.
    Details of the Glossary Term
    """
    glossaryTermInfo: GlossaryTermInfo!

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
Deprecated! Use GlossaryTermProperties instead.
Information about a glossary ter
"""
type GlossaryTermInfo {
    """
    Definition of the glossary term
    """
    definition: String!

    """
    Term Source of the glossary term
    """
    termSource: String!

    """
    Source Ref of the glossary term
    """
    sourceRef: String

    """
    Source Url of the glossary term
    """
    sourceUrl: String

    """
    Properties of the glossary term
    """
    customProperties: [StringMapEntry!]

    """
    Schema definition of glossary term
    """
    rawSchema: String
}

"""
Additional read-only properties about a Glossary Term
"""
type GlossaryTermProperties {
    """
    Definition of the glossary term
    """
    definition: String!

    """
    Term Source of the glossary term
    """
    termSource: String!

    """
    Source Ref of the glossary term
    """
    sourceRef: String

    """
    Source Url of the glossary term
    """
    sourceUrl: String

    """
    Properties of the glossary term
    """
    customProperties: [StringMapEntry!]

    """
    Schema definition of glossary term
    """
    rawSchema: String
}

"""
A Data Platform represents a specific 3rd party Data System or Tool. Examples include
warehouses like Snowflake, orchestrators like Airflow, and dashboarding tools like Looker.
"""
type DataPlatform implements Entity {
    """
    Urn of the data platform
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    Name of the data platform
    """
    name: String!

    """
    Additional read-only properties associated with a data platform
    """
    properties: DataPlatformProperties

    """
    Deprecated! Use info.displayName instead
    Display name of the data platform
    """
    @deprecated
    displayName: String

    """
    Deprecated! Use properties field instead.
    Additional properties associated with a data platform
    """
    @deprecated
    info: DataPlatformInfo

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
Deprecated! Use DataPlatformProperties instead.
Additional read-only information about a Data Platform
"""
@deprecated
type DataPlatformInfo {
    """
    The platform category
    """
    type: PlatformType!

    """
    Display name associated with the platform
    """
    displayName: String

    """
    The delimiter in the dataset names on the data platform
    """
    datasetNameDelimiter: String!

    """
    A logo URL associated with the platform
    """
    logoUrl: String
}

"""
Additional read-only properties about a Data Platform
"""
type DataPlatformProperties {
    """
    The platform category
    """
    type: PlatformType!

    """
    Display name associated with the platform
    """
    displayName: String

    """
    The delimiter in the dataset names on the data platform
    """
    datasetNameDelimiter: String!

    """
    A logo URL associated with the platform
    """
    logoUrl: String
}

"""
The category of a specific Data Platform
"""
enum PlatformType {
    """
    Value for a file system
    """
    FILE_SYSTEM

    """
    Value for a key value store
    """
    KEY_VALUE_STORE

    """
    Value for a message broker
    """
    MESSAGE_BROKER

    """
    Value for an object store
    """
    OBJECT_STORE

    """
    Value for an OLAP datastore
    """
    OLAP_DATASTORE

    """
    Value for a query engine
    """
    QUERY_ENGINE

    """
    Value for a relational database
    """
    RELATIONAL_DB

    """
    Value for a search engine
    """
    SEARCH_ENGINE

    """
    Value for other platforms
    """
    OTHERS
}

"""
An environment identifier for a particular Entity, i.e. staging or production.
Note that this model will soon be deprecated in favor of a more general purpose of notion
of data environment
"""
enum FabricType {
    """
    Designates development fabrics
    """
    DEV

    """
    Designates early-integration (staging) fabrics
    """
    EI

    """
    Designates production fabrics
    """
    PROD

    """
    Designates corporation fabrics
    """
    CORP
}

"""
The data type associated with an individual Machine Learning Feature
"""
enum MLFeatureDataType {
    USELESS
    NOMINAL
    ORDINAL
    BINARY
    COUNT
    TIME
    INTERVAL
    IMAGE
    VIDEO
    AUDIO
    TEXT
    MAP
    SEQUENCE
    SET
    CONTINUOUS
    BYTE
    UNKNOWN
}

"""
Deprecated! Use Deprecation instead.
Information about Dataset deprecation status.
Note that this model will soon be migrated to a more general purpose Entity status.
"""
@deprecated
type DatasetDeprecation {
    """
    Whether the dataset has been deprecated by owner
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!

    """
    The user who will be credited for modifying this deprecation content
    """
    actor: String
}

"""
Institutional memory metadata, meaning internal links and pointers related to an Entity
"""
type InstitutionalMemory {
    """
    List of records that represent the institutional memory (internal documentation) of an entity
    """
    elements: [InstitutionalMemoryMetadata!]!
}

"""
An institutional memory resource (link) about a particular Metadata Entity
"""
type InstitutionalMemoryMetadata {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String!

    """
    The author of this metadata
    """
    author: CorpUser!

    """
    An AuditStamp corresponding to the creation of this resource
    """
    created: AuditStamp!
}

"""
Metadata about a Dataset schema
"""
type SchemaMetadata implements Aspect {
    """
    The logical version of the schema metadata, where 0 represents the latest version
    with otherwise monotonic ordering starting at 1
    """
    aspectVersion: Long

    """
    Dataset this schema metadata is associated with
    """
    datasetUrn: String

    """
    Schema name
    """
    name: String!

    """
    Platform this schema metadata is associated with
    """
    platformUrn: String!

    """
    The version of the GMS Schema metadata
    """
    version: Long!

    """
    The cluster this schema metadata is derived from
    """
    cluster: String

    """
    The SHA1 hash of the schema content
    """
    hash: String!

    """
    The native schema in the datasets platform, schemaless if it was not provided
    """
    platformSchema: PlatformSchema

    """
    Client provided a list of fields from value schema
    """
    fields: [SchemaField!]!

    """
    Client provided list of fields that define primary keys to access record
    """
    primaryKeys: [String!]

    """
    The time at which the schema metadata information was created
    """
    createdAt: Long
}

"""
Deprecated! Use SchemaMetadata instead.
Metadata about a Dataset schema
"""
@deprecated
type Schema {
    """
    Dataset this schema metadata is associated with
    """
    datasetUrn: String

    """
    Schema name
    """
    name: String!

    """
    Platform this schema metadata is associated with
    """
    platformUrn: String!

    """
    The version of the GMS Schema metadata
    """
    version: Long!

    """
    The cluster this schema metadata is derived from
    """
    cluster: String

    """
    The SHA1 hash of the schema content
    """
    hash: String!

    """
    The native schema in the datasets platform, schemaless if it was not provided
    """
    platformSchema: PlatformSchema

    """
    Client provided a list of fields from value schema
    """
    fields: [SchemaField!]!

    """
    Client provided list of fields that define primary keys to access record
    """
    primaryKeys: [String!]
}

"""
A type of Schema, either a table schema or a key-value schema
"""
union PlatformSchema = TableSchema | KeyValueSchema

"""
Information about a raw Table Schema
"""
type TableSchema {
    """
    Raw table schema
    """
    schema: String!
}

"""
Information about a raw Key-Value Schema
"""
type KeyValueSchema {
    """
    Raw key schema
    """
    keySchema: String!

    """
    Raw value schema
    """
    valueSchema: String!
}

"""
Information about an individual field in a Dataset schema
"""
type SchemaField {
    """
    Flattened name of the field computed from jsonPath field
    """
    fieldPath: String!

    """
    Flattened name of a field in JSON Path notation
    """
    jsonPath: String

    """
    Indicates if this field is optional or nullable
    """
    nullable: Boolean!

    """
    Description of the field
    """
    description: String

    """
    Platform independent field type of the field
    """
    type: SchemaFieldDataType!

    """
    The native type of the field in the datasets platform as declared by platform schema
    """
    nativeDataType: String

    """
    Whether the field references its own type recursively
    """
    recursive: Boolean!

    """
    Deprecated! Use tags field instead.
    Tags associated with the field
    """
    @deprecated
    globalTags: GlobalTags

    """
    Tags associated with the field
    """
    tags: GlobalTags

    """
    Glossary terms associated with the field
    """
    glossaryTerms: GlossaryTerms

    """
    Whether the field is part of a key schema
    """
    isPartOfKey: Boolean
}

"""
Information about schema metadata that is editable via the UI
"""
type EditableSchemaMetadata {
    """
    Editable schema field metadata
    """
    editableSchemaFieldInfo: [EditableSchemaFieldInfo!]!
}

"""
Editable schema field metadata (descriptions, tags, etc)
"""
type EditableSchemaFieldInfo {
    """
    Flattened name of a field identifying the field the editable info is applied to
    """
    fieldPath: String!

    """
    Edited description of the field
    """
    description: String

    """
    Tags associated with the field
    Deprecated! Use tags field instead.
    """
    @deprecated
    globalTags: GlobalTags

    """
    Tags associated with the field
    """
    tags: GlobalTags

    """
    Glossary terms associated with the field
    """
    glossaryTerms: GlossaryTerms
}

"""
The type associated with a single Dataset schema field
"""
enum SchemaFieldDataType {
    """
    A boolean type
    """
    BOOLEAN

    """
    A fixed bytestring type
    """
    FIXED

    """
    A string type
    """
    STRING

    """
    A string of bytes
    """
    BYTES

    """
    A number, including integers, floats, and doubles.
    """
    NUMBER

    """
    A datestrings type
    """
    DATE

    """
    A timestamp type
    """
    TIME

    """
    An enum type
    """
    ENUM

    """
    A null type
    """
    NULL

    """
    A map collection type
    """
    MAP

    """
    An array collection type
    """
    ARRAY

    """
    An union type
    """
    UNION

    """
    An complex struct type
    """
    STRUCT
}

"""
Dataset properties that are editable via the UI. This represents logical metadata,
as opposed to technical metadata.
"""
type DatasetEditableProperties {
    """
    Description of the Dataset
    """
    description: String
}

"""
Chart properties that are editable via the UI. This represents logical metadata,
as opposed to technical metadata.
"""
type ChartEditableProperties {
    """
    Description of the Chart
    """
    description: String
}

"""
Dashboard properties that are editable via the UI. This represents logical metadata,
as opposed to technical metadata.
"""
type DashboardEditableProperties {
    """
    Description of the Dashboard
    """
    description: String
}

"""
Data Job properties that are editable via the UI. This represents logical metadata,
as opposed to technical metadata.
"""
type DataJobEditableProperties {
    """
    Description of the Data Job
    """
    description: String
}

"""
Data Flow properties that are editable via the UI. This represents logical metadata,
as opposed to technical metadata.
"""
type DataFlowEditableProperties {
    """
    Description of the Data Flow
    """
    description: String
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type EntityRelationshipLegacy {
    """
    Entity that is related via lineage
    """
    entity: EntityWithRelationships

    """
    An AuditStamp corresponding to the last modification of this relationship
    """
    created: AuditStamp
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type UpstreamEntityRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DownstreamEntityRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DataFlowDataJobsRelationships {
    entities: [EntityRelationshipLegacy]
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type UpstreamLineage {
    """
    List of upstream datasets
    """
    upstreams: [RelatedDataset!]!
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type DownstreamLineage {
    """
    List of downstream datasets
    """
    downstreams: [RelatedDataset!]!
}

"""
Deprecated! Use 'relationships' query instead.
"""
@deprecated
type RelatedDataset {
    """
    The upstream dataset the lineage points to
    """
    dataset: Dataset!

    """
    The type of the lineage
    """
    type: DatasetLineageType!

    """
    When the lineage was created
    """
    created: AuditStamp!
}

"""
Deprecated!
The type of an edge between 2 Datasets
"""
enum DatasetLineageType {
    """
    Direct copy without modification
    """
    COPY

    """
    Transformed dataset
    """
    TRANSFORMED

    """
    Represents a view defined on the sources
    """
    VIEW
}

"""
The status of a particular Metadata Entity
"""
type Status {
    """
    Whether the entity is removed or not
    """
    removed: Boolean!
}

"""
Deprecated! Do not use this type.
The logical type associated with an individual Dataset
"""
enum PlatformNativeType {
    """
    Table
    """
    TABLE

    """
    View
    """
    VIEW

    """
    Directory in file system
    """
    DIRECTORY

    """
    Stream
    """
    STREAM

    """
    Bucket in key value store
    """
    BUCKET
}

"""
An entry in a string-string map represented as a tuple
"""
type StringMapEntry {
    """
    The key of the map entry
    """
    key: String!

    """
    The value fo the map entry
    """
    value: String
}

"""
The origin of Ownership metadata associated with a Metadata Entity
"""
enum OwnershipSourceType {
    """
    Auditing system or audit logs
    """
    AUDIT

    """
    Database, e.g. GRANTS table
    """
    DATABASE

    """
    File system, e.g. file/directory owner
    """
    FILE_SYSTEM

    """
    Issue tracking system, e.g. Jira
    """
    ISSUE_TRACKING_SYSTEM

    """
    Manually provided by a user
    """
    MANUAL

    """
    Other ownership-like service, e.g. Nuage, ACL service etc
    """
    SERVICE

    """
    SCM system, e.g. GIT, SVN
    """
    SOURCE_CONTROL

    """
    Other sources
    """
    OTHER
}

"""
Information about the source of Ownership metadata about a Metadata Entity
"""
type OwnershipSource {
    """
    The type of the source
    """
    type: OwnershipSourceType!

    """
    An optional reference URL for the source
    """
    url: String
}

"""
The type of the ownership relationship between a Person and a Metadata Entity
Note that this field will soon become deprecated due to low usage!
"""
enum OwnershipType {
    """
    A person or group that is in charge of developing the code
    """
    DEVELOPER

    """
    A person or group that is owning the data
    """
    DATAOWNER

    """
    A person or a group that overseas the operation, e.g. a DBA or SRE.
    """
    DELEGATE

    """
    A person, group, or service that produces/generates the data
    """
    PRODUCER

    """
    A person, group, or service that consumes the data
    """
    CONSUMER

    """
    A person or a group that has direct business interest
    """
    STAKEHOLDER
}

"""
A DataHub User entity, which represents a Person on the Metadata Entity Graph
"""
type CorpUser implements Entity {
    """
    The primary key of the user
    """
    urn: String!

    """
    The standard Entity Type
    """
    type: EntityType!

    """
    A username associated with the user. This uniquely identifies the user within DataHub.
    """
    username: String!

    """
    Additional read-only properties about the corp user
    """
    properties: CorpUserProperties

    """
    Read-write properties about the corp user
    """
    editableProperties: CorpUserEditableProperties

    """
    The tags associated with the user
    """
    tags: GlobalTags

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only info about the corp user
    """
    @deprecated
    info: CorpUserInfo

    """
    Deprecated! Use editableProperties field instead.
    Read-write info about the corp user
    """
    @deprecated
    editableInfo: CorpUserEditableInfo

    """
    Deprecated! Use the tags field instead.
    The structured tags associated with the user
    """
    @deprecated
    globalTags: GlobalTags
}

"""
Deprecated! Use CorpUserProperties instead.
Additional read-only info about a user
"""
@deprecated
type CorpUserInfo {
    """
    Whether the user is active
    """
    active: Boolean!

    """
    Display name of the user
    """
    displayName: String

    """
    Email address of the user
    """
    email: String

    """
    Title of the user
    """
    title: String

    """
    Direct manager of the user
    """
    manager: CorpUser

    """
    department id the user belong to
    """
    departmentId: Long

    """
    department name this user belong to
    """
    departmentName: String

    """
    first name of the user
    """
    firstName: String

    """
    last name of the user
    """
    lastName: String

    """
    Common name of this user, format is firstName plus lastName
    """
    fullName: String

    """
    two uppercase letters country code
    """
    countryCode: String
}

"""
Additional read-only properties about a user
"""
type CorpUserProperties {
    """
    Whether the user is active
    """
    active: Boolean!

    """
    Display name of the user
    """
    displayName: String

    """
    Email address of the user
    """
    email: String

    """
    Title of the user
    """
    title: String

    """
    Direct manager of the user
    """
    manager: CorpUser

    """
    department id the user belong to
    """
    departmentId: Long

    """
    department name this user belong to
    """
    departmentName: String

    """
    first name of the user
    """
    firstName: String

    """
    last name of the user
    """
    lastName: String

    """
    Common name of this user, format is firstName plus lastName
    """
    fullName: String

    """
    two uppercase letters country code
    """
    countryCode: String
}

"""
Deprecated! Use CorpUserEditableProperties instead.
Additional read-write info about a user
"""
@deprecated
type CorpUserEditableInfo {
    """
    About me section of the user
    """
    aboutMe: String

    """
    Teams that the user belongs to
    """
    teams: [String!]

    """
    Skills that the user possesses
    """
    skills: [String!]

    """
    A URL which points to a picture which user wants to set as a profile photo
    """
    pictureLink: String
}

"""
Additional read-write properties about a user
"""
type CorpUserEditableProperties {
    """
    About me section of the user
    """
    aboutMe: String

    """
    Teams that the user belongs to
    """
    teams: [String!]

    """
    Skills that the user possesses
    """
    skills: [String!]

    """
    A URL which points to a picture which user wants to set as a profile photo
    """
    pictureLink: String
}

"""
A DataHub Group entity, which represents a Person on the Metadata Entity Graph
"""
type CorpGroup implements Entity {
    """
    The primary key of the group
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    Group name e.g. wherehows-dev, ask_metadata
    """
    name: String!

    """
    Additional read-only properties about the group
    """
    properties: CorpGroupProperties

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only info about the group
    """
    @deprecated
    info: CorpGroupInfo
}

"""
Deprecated! Use CorpUserProperties instead.
Additional read-only info about a group
"""
@deprecated
type CorpGroupInfo {
    """
    The name to display when rendering the group
    """
    displayName: String

    """
    The description provided for the group.
    """
    description: String

    """
    email of this group
    """
    email: String

    """
    Deprecated! Use relationships field instead
    owners of this group
    """
    @deprecated
    admins: [CorpUser!]

    """
    Deprecated! Use relationships field instead
    List of ldap urn in this group.
    """
    @deprecated
    members: [CorpUser!]

    """
    Deprecated! Use relationships field instead
    List of groups urns in this group.
    """
    @deprecated
    groups: [String!]
}

"""
Additional read-only properties about a group
"""
type CorpGroupProperties {
    """
    The description provided for the group.
    """
    description: String

    """
    email of this group
    """
    email: String
}

"""
An owner of a Metadata Entity, either a user or group.
"""
union OwnerType = CorpUser | CorpGroup

"""
An owner of a Metadata Entity
"""
type Owner {
    """
    Owner object
    """
    owner: OwnerType!

    """
    The type of the ownership
    """
    type: OwnershipType!

    """
    Source information for the ownership
    """
    source: OwnershipSource
}

"""
Ownership information about a Metadata Entity
"""
type Ownership {
    """
    List of owners of the entity
    """
    owners: [Owner!]

    """
    Audit stamp containing who last modified the record and when
    """
    lastModified: AuditStamp!
}

"""
A Tag Entity, which can be associated with other Metadata Entities and subresources
"""
type Tag implements Entity {

    """
    The primary key of the TAG
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The display name of the tag
    """
    name: String!

    """
    Additional read-write properties about the Tag
    """
    editableProperties: EditableTagProperties

    """
    Ownership metadata of the dataset
    """
    ownership: Ownership

    """
    Edges extending from this entity
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use editableProperties field instead.
    Description of the tag
    """
    @deprecated
    description: String
}

"""
An edge between a Metadata Entity and a Tag. Modeled as a struct to permit
additional attributes.
TODO: Consider whether this query should be serviced by the relationships field
"""
type TagAssociation {
    """
    The tag itself
    """
    tag: Tag!
}

"""
Tags attached to a particular Metadata Entity
"""
type GlobalTags {
    """
    The set of tags attached to the Metadata Entity
    """
    tags: [TagAssociation!]
}

"""
The technical version associated with a given Metadata Entity.
"""
type VersionTag {
    versionTag: String
}

"""
Glossary Terms attached to a particular Metadata Entity
"""
type GlossaryTerms {
     """
     The set of glossary terms attached to the Metadata Entity
     """
    terms: [GlossaryTermAssociation!]
}

"""
An edge between a Metadata Entity and a Glossary Term. Modeled as a struct to permit
additional attributes.
TODO: Consider whether this query should be serviced by the relationships field
"""
type GlossaryTermAssociation {
    """
    The glossary term itself
    """
    term: GlossaryTerm!
}

"""
Arguments provided to update a Chart Entity
"""
input ChartUpdateInput {
    """
    The primary key of the Chart to be updated
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: ChartEditablePropertiesUpdate
}

"""
Arguments provided to update a Chart Entity
"""
input DashboardUpdateInput {
    """
    The primary key of the Dashboard to be updated
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DashboardEditablePropertiesUpdate
}

"""
Arguments provided to update a Data Flow (Pipeline) Entity
"""
input DataFlowUpdateInput {
    """
    The primary key of the Data Flow (Pipeline) to be updated
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DataFlowEditablePropertiesUpdate
}

"""
Arguments provided to update a Data Job (Task) Entity
"""
input DataJobUpdateInput {
    """
    The primary key of the Data Job (Task) to be updated
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable properties
    """
    editableProperties: DataJobEditablePropertiesUpdate
}

"""
Arguments provided to update a Dataset Entity
"""
input DatasetUpdateInput {
    """
    The primary key of the Dataset to be updated
    """
    urn: String!

    """
    Update to ownership
    """
    ownership: OwnershipUpdate

    """
    Update to deprecation status
    """
    deprecation: DatasetDeprecationUpdate

    """
    Update to institutional memory, ie documentation
    """
    institutionalMemory: InstitutionalMemoryUpdate

    """
    Update to global tags
    """
    globalTags: GlobalTagsUpdate

    """
    Update to editable schema metadata of the dataset
    """
    editableSchemaMetadata: EditableSchemaMetadataUpdate

    """
    Update to editable properties
    """
    editableProperties: DatasetEditablePropertiesUpdate
}

"""
Update to editable schema metadata of the dataset
"""
input EditableSchemaMetadataUpdate {
    """
    Update to writable schema field metadata
    """
    editableSchemaFieldInfo: [EditableSchemaFieldInfoUpdate!]!
}

"""
Update to writable schema field metadata
"""
input EditableSchemaFieldInfoUpdate {
    """
    Flattened name of a field identifying the field the editable info is applied to
    """
    fieldPath: String!

    """
    Edited description of the field
    """
    description: String

    """
    Tags associated with the field
    """
    globalTags: GlobalTagsUpdate
}

"""
Update to writable Dataset fields
"""
input DatasetEditablePropertiesUpdate {
    """
    Writable description (aka Documentation) for a Dataset
    """
    description: String!
}

"""
Update to writable Chart fields
"""
input ChartEditablePropertiesUpdate {
    """
    Writable description (aka Documentation) for a Chart
    """
    description: String!
}

"""
Update to writable Dashboard fields
"""
input DashboardEditablePropertiesUpdate {
    """
    Writable description (aka Documentation) for a Dashboard
    """
    description: String!
}

"""
Update to writable Data Job fields
"""
input DataJobEditablePropertiesUpdate {
    """
    Writable description (aka Documentation) for a Data Job
    """
    description: String!
}

"""
Update to writable Data Flow fields
"""
input DataFlowEditablePropertiesUpdate {
    """
    Writable description (aka Documentation) for a Data Flow
    """
    description: String!
}

"""
Deprecated! Use addTag / removeTag mutation instead
Update to the Tags associated with a Metadata Entity
"""
@deprecated
input GlobalTagsUpdate {
    """
    The new set of tags
    """
    tags: [TagAssociationUpdate!]
}

"""
Deprecated! Use addTag / removeTag mutation instead.
A tag update to be applied
"""
@deprecated
input TagAssociationUpdate {
    """
    The tag being applied
    """
    tag: TagUpdate!
}

"""
Deprecated! Use addTag / removeTag mutations instead.
An update for a particular Tag entity
"""
@deprecated
input TagUpdate {
    """
    The primary key of the Tag
    """
    urn: String!

    """
    The display name of a Tag
    """
    name: String!

    """
    Description of the tag
    """
    description: String

    """
    Ownership metadata of the tag
    """
    ownership: OwnershipUpdate
}

"""
An update for the ownership information for a Metadata Entity
"""
input OwnershipUpdate {
    """
    The updated list of owners
    """
   owners: [OwnerUpdate!]!
}

"""
An owner to add to a Metadata Entity
TODO: Add a USER / GROUP actor enum.
"""
input OwnerUpdate {
    """
    The owner URN, eg urn:li:corpuser:1 or urn:li:corpGroup:groupName
    """
    owner: String!

    """
    The owner type
    """
    type: OwnershipType!
}

"""
An update for the deprecation information for a Metadata Entity
"""
input DatasetDeprecationUpdate {
    """
    Whether the dataset is deprecated
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this dataset
    """
    decommissionTime: Long

    """
    Additional information about the dataset deprecation plan
    """
    note: String!
}

"""
An update for the institutional memory (links) information for a Metadata Entity
"""
input InstitutionalMemoryUpdate {
    """
    The individual references in the institutional memory
    """
    elements: [InstitutionalMemoryMetadataUpdate!]!
}

"""
An institutional memory (link) to add to a Metadata Entity
TODO: Add a USER / GROUP actor enum.
"""
input InstitutionalMemoryMetadataUpdate {
    """
    Link to a document or wiki page or another internal resource
    """
    url: String!

    """
    Description of the resource
    """
    description: String

    """
    The corp user urn of the author of the metadata
    """
    author: String!

    """
    The time at which this metadata was created
    """
    createdAt: Long
}

"""
A Dashboard Metadata Entity
"""
type Dashboard implements EntityWithRelationships & Entity {
    """
    The primary key of the Dashboard
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The dashboard tool name
    Note that this will soon be deprecated in favor of a standardized notion of Data Platform
    """
    tool: String!

    """
    An id unique within the dashboard tool
    """
    dashboardId: String!

    """
    Additional read-only properties about the dashboard
    """
    properties: DashboardProperties

    """
    Additional read-write properties about the dashboard
    """
    editableProperties: DashboardEditableProperties

    """
    Ownership metadata of the dashboard
    """
    ownership: Ownership

    """
    Status metadata of the dashboard
    """
    status: Status

    """
    The tags associated with the dashboard
    """
    tags: GlobalTags

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only information about the dashboard
    """
    @deprecated
    info: DashboardInfo

    """
    Deprecated! Use editableProperties instead.
    Additional read-write properties about the Dashboard
    """
    @deprecated
    editableInfo: DashboardEditableProperties

    """
    Deprecated! Use tags field instead.
    The structured tags associated with the dashboard
    """
    @deprecated
    globalTags: GlobalTags

    """
    Deprecated! Use relationships field instead
    Entities upstream of the given entity
    """
    @deprecated
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use relationships field instead
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships
}

"""
Deprecated! Use DashboardProperties instead.
Additional read-only info about a Dashboard
"""
@deprecated
type DashboardInfo {
    """
    Display of the dashboard
    """
    name: String!

    """
    Description of the dashboard
    """
    description: String

    """
    Charts that comprise the dashboard
    """
    charts: [Chart!]!

    """
    Native platform URL of the dashboard
    """
    externalUrl: String

    """
    Access level for the dashboard
    Note that this will soon be deprecated for low usage.
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this dashboard last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this dashboard
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this dashboard
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this dashboard
    """
    deleted: AuditStamp
}

"""
Additional read-only properties about a Dashboard
"""
type DashboardProperties {
    """
    Display of the dashboard
    """
    name: String!

    """
    Description of the dashboard
    """
    description: String

    """
    Charts that comprise the dashboard
    """
    charts: [Chart!]!

    """
    Native platform URL of the dashboard
    """
    externalUrl: String

    """
    Access level for the dashboard
    Note that this will soon be deprecated for low usage.
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this dashboard last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this dashboard
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this dashboard
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this dashboard
    """
    deleted: AuditStamp
}

"""
A Chart Metadata Entity
"""
type Chart implements EntityWithRelationships & Entity {
    """
    The primary key of the Chart
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The chart tool name
    Note that this field will soon be deprecated in favor a unified notion of Data Platform
    """
    tool: String!

    """
    An id unique within the charting tool
    """
    chartId: String!

    """
    Additional read-only properties about the Chart
    """
    properties: ChartProperties

    """
    Additional read-write properties about the Chart
    """
    editableProperties: ChartEditableProperties

    """
    Info about the query which is used to render the chart
    """
    query: ChartQuery

    """
    Ownership metadata of the chart
    """
    ownership: Ownership

    """
    Status metadata of the chart
    """
    status: Status

    """
    The tags associated with the chart
    """
    tags: GlobalTags

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only information about the chart
    """
    @deprecated
    info: ChartInfo

    """
    Deprecated! Use editableProperties field instead.
    Additional read-write information about the Chart
    """
    @deprecated
    editableInfo: ChartEditableProperties

    """
    Deprecated! Use tags instead.
    The structured tags associated with the chart
    """
    @deprecated
    globalTags: GlobalTags

    """
    Deprecated! Use relationships field instead.
    Entities upstream of the given entity
    """
    @deprecated
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use relationships field instead
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships
}

"""
Deprecated! Use ChartProperties instead.
Additional read-only information about the chart
"""
@deprecated
type ChartInfo {
    """
    Display name of the chart
    """
    name: String!

    """
    Description of the chart
    """
    description: String

    """
    Data sources for the chart
    """
    inputs: [Dataset!]

    """
    Native platform URL of the chart
    """
    externalUrl: String

    """
    Access level for the chart
    """
    type: ChartType

    """
    Access level for the chart
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this chart last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this chart
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this chart
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this chart
    """
    deleted: AuditStamp
}

"""
Additional read-only properties about the chart
"""
type ChartProperties {
    """
    Display name of the chart
    """
    name: String!

    """
    Description of the chart
    """
    description: String

    """
    Data sources for the chart
    """
    inputs: [Dataset!]

    """
    Native platform URL of the chart
    """
    externalUrl: String

    """
    Access level for the chart
    """
    type: ChartType

    """
    Access level for the chart
    """
    access: AccessLevel

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]

    """
    The time when this chart last refreshed
    """
    lastRefreshed: Long

    """
    An AuditStamp corresponding to the creation of this chart
    """
    created: AuditStamp!

    """
    An AuditStamp corresponding to the modification of this chart
    """
    lastModified: AuditStamp!

    """
    An optional AuditStamp corresponding to the deletion of this chart
    """
    deleted: AuditStamp
}

"""
The access level for a Metadata Entity, either public or private.
"""
enum AccessLevel {
    """
    Publicly available
    """
    PUBLIC

    """
    Restricted to a subset of viewers
    """
    PRIVATE
}

"""
The type of a Chart Entity
"""
enum ChartType {
    """
    Bar graph
    """
    BAR

    """
    Pie chart
    """
    PIE

    """
    Scatter plot
    """
    SCATTER

    """
    Table
    """
    TABLE

    """
    Markdown formatted text
    """
    TEXT

    """
    A line chart
    """
    LINE

    """
    An area chart
    """
    AREA

    """
    A histogram chart
    """
    HISTOGRAM

    """
    A box plot chart
    """
    BOX_PLOT
}

"""
The query that was used to populate a Chart
"""
type ChartQuery {
    """
    Raw query to build a chart from input datasets
    """
    rawQuery: String!

    """
    The type of the chart query
    """
    type: ChartQueryType!
}

"""
The type of the Chart Query
"""
enum ChartQueryType {
    """
    Standard ANSI SQL
    """
    SQL

    """
    LookML
    """
    LOOKML
}


"""
A Data Flow Metadata Entity, representing an set of pipelined Data Job or Tasks required
to produce an output Dataset. Also known as a Data Pipeline.
"""
type DataFlow implements Entity {
    """
    The primary key of a Data Flow
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    Workflow orchestrator ex: Azkaban, Airflow
    """
    orchestrator: String!

    """
    Id of the flow
    """
    flowId: String!

    """
    Cluster of the flow
    """
    cluster: String!

    """
    Additional read-only properties about a Data flow
    """
    properties: DataFlowProperties

    """
    Additional read-write properties about a Data Flow
    """
    editableProperties: DataFlowEditableProperties

    """
    Ownership metadata of the flow
    """
    ownership: Ownership

    """
    The tags associated with the dataflow
    """
    tags: GlobalTags

    """
    Status metadata of the dataflow
    """
    status: Status

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only information about a Data flow
    """
    @deprecated
    info: DataFlowInfo

    """
    Deprecated! Use tags field instead.
    The structured tags associated with the dataflow
    """
    @deprecated
    globalTags: GlobalTags

    """
    Deprecated! Use relationships field instead.
    Data Jobs
    """
    @deprecated
    dataJobs: DataFlowDataJobsRelationships
}

"""
Deprecated! Use DataFlowProperties instead.
Additional read-only properties about a Data Flow (Pipeline)
"""
@deprecated
type DataFlowInfo {
    """
    Display name of the flow
    """
    name: String!

    """
    Description of the flow
    """
    description: String

    """
    Optional project/namespace associated with the flow
    """
    project: String

    """
    External URL associated with the DataFlow
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

"""
Additional read-only properties about a Data Flow (Pipeline)
"""
type DataFlowProperties {
    """
    Display name of the flow
    """
    name: String!

    """
    Description of the flow
    """
    description: String

    """
    Optional project/namespace associated with the flow
    """
    project: String

    """
    External URL associated with the DataFlow
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

"""
A Data Job Metadata Entity, representing an individual unit of computation or Task
to produce an output Dataset. Always part of a parent Data Flow (Pipeline)
"""
type DataJob implements EntityWithRelationships & Entity {
    """
    The primary key of the Data Job
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The associated data flow
    """
    dataFlow: DataFlow

    """
    Id of the job
    """
    jobId: String!

    """
    Additional read-only properties associated with the Data Job.
    """
    properties: DataJobProperties

    """
    Additional read-write properties associated with the Data Job.
    """
    editableProperties: DataJobEditableProperties

    """
    Ownership metadata of the job
    """
    ownership: Ownership

    """
    Information about the inputs and outputs of a Data processing job
    """
    inputOutput: DataJobInputOutput

    """
    Status metadata of the DataJob
    """
    status: Status

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult

    """
    Deprecated! Use properties field instead.
    Additional read-only information about a Data processing job
    """
    @deprecated
    info: DataJobInfo

    """
    Deprecated! Use relationships field instead.
    Entities upstream of the given entity
    """
    @deprecated
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use relationships field instead.
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships

    """
    Deprecated! Use the tags field instead
    The structured tags associated with the DataJob
    """
    @deprecated
    globalTags: GlobalTags
}

"""
Deprecated! Use DataJobProperties instead
Additional read-only information about a Data Job (task)
"""
@deprecated
type DataJobInfo {
    """
    Job display name
    """
    name: String!

    """
    Job description
    """
    description: String

    """
    External URL associated with the DataJob
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

"""
Additional read-only properties about a Data Job (task)
"""
type DataJobProperties {
    """
    Job display name
    """
    name: String!

    """
    Job description
    """
    description: String

    """
    External URL associated with the DataJob
    """
    externalUrl: String

    """
    A list of platform-specific metadata tuples
    """
    customProperties: [StringMapEntry!]
}

"""
The lineage information for a DataJob.
TODO: Rename this to align with other Lineage models.
"""
type DataJobInputOutput {
    """
    Deprecated! Use relationships field instead
    Input datasets produced by the data job during processing
    """
    @deprecated
    inputDatasets: [Dataset!]

    """
    Deprecated! Use relationships field instead.
    Output datasets produced by the data job during processing
    """
    @deprecated
    outputDatasets: [Dataset!]

    """
    Deprecated! Use relationships field instead.
    Input datajobs that this data job depends on
    """
    @deprecated
    inputDatajobs: [DataJob!]
}

"""
Information about individual user usage of a Dataset
"""
type UserUsageCounts {
    """
    The user of the Dataset
    """
    user: CorpUser

    """
    The number of queries issued by the user
    """
    count: Int

    """
    The extracted user email. Note that this field will soon be deprecated and merged
    with user.
    """
    userEmail: String
}

"""
The result of a Dataset usage query
"""
type UsageQueryResult {
    """
    A set of relevant time windows for use in displaying usage statistics
    """
    buckets: [UsageAggregation]

    """
    A set of rolled up aggregations about the Dataset usage
    """
    aggregations: UsageQueryResultAggregations
}

"""
A set of rolled up aggregations about the Dataset usage
"""
type UsageQueryResultAggregations {
    """
    The count of unique Dataset users within the queried time range
    """
    uniqueUserCount: Int

    """
    The specific per-user usage counts within the queried time range
    """
    users: [UserUsageCounts]

    """
    The specific per-field usage counts within the queried time range
    """
    fields: [FieldUsageCounts]

    """
    The total number of queries executed within the queried time range.
    Note: This field will likely be deprecated in favor of a totalQueries field.
    """
    totalSqlQueries: Int
}

"""
An aggregation of Dataset usage statistics
"""
type UsageAggregation {
    """
    The time window start time
    """
    bucket: Long

    """
    The time window span
    """
    duration: WindowDuration

    """
    The resource urn associated with the usage information, e.g. urn:li:dataset:x
    """
    resource: String

    """
    The rolled up usage metrics
    """
    metrics: UsageAggregationMetrics
}

type UsageAggregationMetrics {
    uniqueUserCount: Int
    users: [UserUsageCounts]
    totalSqlQueries: Int
    topSqlQueries: [String]
    fields: [FieldUsageCounts]
}

"""
The usage for a particular Dataset field
"""
type FieldUsageCounts {
    """
    The path of the field
    """
    fieldName: String

    """
    The count of usages
    """
    count: Int
}

"""
The duration of a fixed window of time
"""
enum WindowDuration {
    """
    A one-day window
    """
    DAY

    """
    A one-week window
    """
    WEEK

    """
    A one-month window
    """
    MONTH

    """
    A one-year window
    """
    YEAR
}

"""
A time range used in fetching Dataset Usage statistics
"""
enum TimeRange {
    """
    Last day
    """
    DAY

    """
    Last week
    """
    WEEK

    """
    Last month
    """
    MONTH

    """
    Last quarter
    """
    QUARTER

    """
    Last year
    """
    YEAR

    """
    All time
    """
    ALL
}

"""
A Dataset Profile associated with a Dataset, containing profiling statistics about the
Dataset
"""
type DatasetProfile implements TimeSeriesAspect {
  """
  The time at which the profile was reported
  """
  timestampMillis: Long!

  """
  An optional row count of the Dataset
  """
  rowCount: Long

  """
  An optional column count of the Dataset
  """
  columnCount: Long

  """
  An optional set of per-field statistics obtained in the profile
  """
  fieldProfiles: [DatasetFieldProfile!]

  """
  Information about the partition that was profiled
  """
  partitionSpec: PartitionSpec
}

"""
An individual Dataset Field Profile
"""
type DatasetFieldProfile {
  """
  The standardized path of the field
  """
	fieldPath: String!

  """
  The unique value count for the field across the Dataset
  """
	uniqueCount: Long

  """
  The proportion of rows with unique values across the Dataset
  """
	uniqueProportion: Float

  """
  The number of null row values across the Dataset
  """
	nullCount: Long

  """
  The proportion of rows with null values across the Dataset
  """
	nullProportion: Float

  """
  The min value for the field
  """
	min: String

  """
  The max value for the field
  """
	max: String

  """
  The mean value for the field
  """
	mean: String

  """
  The median value for the field
  """
	median: String

  """
  The standard deviation for the field
  """
	stdev: String

  """
  A set of sample values for the field
  """
	sampleValues: [String!]
}

"""
Information about the partition being profiled.
"""
type PartitionSpec {
  """
  The partition identifier
  """
  partition: String!

  """
  The optional time-window partition information
  """
  timePartition: TimeWindow
}

"""
A time window with a finite start and end time
"""
type TimeWindow {
  """
  The start time of the time window
  """
  startTimeMillis: Long!

  """
  The end time of the time window
  """
  durationMillis: Long!
}

"""
An ML Model Metadata Entity. Note that this entity is incubating.
"""
type MLModel implements EntityWithRelationships & Entity {
    """
    The primary key of the ML model
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    ML model display name
    """
    name: String!

    """
    Standardized platform urn where the MLModel is defined
    """
    platform: DataPlatform!

    """
    Fabric type where mlmodel belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for mlmodel
    """
    description: String

    """
    Deprecated! Use tags field instead
    The standard tags for the ML Model
    """
    @deprecated
    globalTags: GlobalTags

    """
    The standard tags for the ML Model
    """
    tags: GlobalTags

    """
    Ownership metadata of the mlmodel
    """
    ownership: Ownership

    """
    Deprecated! Use info instead.
    Additional read-only information about the ML Model
    """
    @deprecated
    properties: MLModelProperties

    """
    Intended use of the mlmodel
    """
    intendedUse: IntendedUse

    """
    Factors metadata of the mlmodel
    """
    factorPrompts: MLModelFactorPrompts

    """
    Metrics metadata of the mlmodel
    """
    metrics: Metrics

    """
    Evaluation Data of the mlmodel
    """
    evaluationData: [BaseData!]

    """
    Training Data of the mlmodel
    """
    trainingData: [BaseData!]

    """
    Quantitative Analyses of the mlmodel
    """
    quantitativeAnalyses: QuantitativeAnalyses

    """
    Ethical Considerations of the mlmodel
    """
    ethicalConsiderations: EthicalConsiderations

    """
    Caveats and Recommendations of the mlmodel
    """
    caveatsAndRecommendations: CaveatsAndRecommendations

    """
    References to internal resources related to the mlmodel
    """
    institutionalMemory: InstitutionalMemory

    """
    Source Code
    """
    sourceCode: SourceCode

    """
    Status metadata of the mlmodel
    """
    status: Status

    """
    Cost Aspect of the mlmodel
    """
    cost: Cost

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Deprecated! Use relationships field instead.
    Entities upstream of the given entity
    """
    @deprecated
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use relationships field instead.
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

"""
An ML Model Group Metadata Entity. Note that this entity is incubating.
"""
type MLModelGroup implements EntityWithRelationships & Entity {
    """
    The primary key of the ML Model Group
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The display name for the Entity
    """
    name: String!

    """
    Standardized platform urn where the MLModelGroup is defined
    """
    platform: DataPlatform!

    """
    Fabric type where MLModelGroup belongs to or where it was generated
    """
    origin: FabricType!

    """
    Human readable description for MLModelGroup
    """
    description: String

    """
    Additional read-only properties about the ML Model Group
    """
    properties: MLModelGroupProperties

    """
    Ownership metadata of the MLModelGroup
    """
    ownership: Ownership

    """
    Status metadata of the MLFeature
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Deprecated! Use relationships field instead.
    Entities upstream of the given entity
    """
    @deprecated
    upstreamLineage: UpstreamEntityRelationships

    """
    Deprecated! Use relationships field instead.
    Entities downstream of the given entity
    """
    @deprecated
    downstreamLineage: DownstreamEntityRelationships

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

type MLModelGroupProperties {

    description: String

    createdAt: Long

    version: VersionTag
}

"""
An ML Feature Metadata Entity. Note that this entity is incubating.
"""
type MLFeature implements Entity {

    """
    The primary key of the ML Feature
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The display name for the ML Feature
    """
    name: String!

    """
    MLFeature featureNamespace
    """
    featureNamespace: String!

    """
    The description about the ML Feature
    """
    description: String

    """
    MLFeature data type
    """
    dataType: MLFeatureDataType

    """
    Ownership metadata of the MLFeature
    """
    ownership: Ownership

    """
    ModelProperties metadata of the MLFeature
    """
    featureProperties: MLFeatureProperties

    """
    References to internal resources related to the MLFeature
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLFeature
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

type MLHyperParam {
    name: String

    description: String

    value: String

    createdAt: Long
}

type MLMetric {
    name: String

    description: String

    value: String

    createdAt: Long
}

type MLModelProperties {

    description: String

    date: Long

    version: String

    type: String

    hyperParameters: HyperParameterMap

    hyperParams:  [MLHyperParam]

    trainingMetrics: [MLMetric]

    mlFeatures: [String!]

    tags: [String!]

    groups: [MLModelGroup]

    customProperties: [StringMapEntry!]
}

type MLFeatureProperties {

    description: String

    dataType: MLFeatureDataType

    version: VersionTag

    sources: [Dataset]
}

"""
An ML Primary Key Entity. Note that this entity is incubating.
"""
type MLPrimaryKey implements Entity {
    """
    The primary key of the ML Primary Key
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The display name
    """
    name: String!

    """
    MLPrimaryKey featureNamespace
    """
    featureNamespace: String!

    """
    MLPrimaryKey description
    """
    description: String

    """
    MLPrimaryKey data type
    """
    dataType: MLFeatureDataType

    """
    Additional read-only properties of the ML Primary Key
    """
    properties: MLPrimaryKeyProperties

    """
    Deprecated! Use properties field instead.
    MLPrimaryKeyProperties
    """
    @deprecated
    primaryKeyProperties: MLPrimaryKeyProperties

    """
    Ownership metadata of the MLPrimaryKey
    """
    ownership: Ownership

    """
    References to internal resources related to the MLPrimaryKey
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLPrimaryKey
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

type MLPrimaryKeyProperties {

    description: String

    dataType: MLFeatureDataType

    version: VersionTag

    sources: [Dataset]
}

"""
An ML Feature Table Entity. Note that this entity is incubating.
"""
type MLFeatureTable implements Entity {
    """
    The primary key of the ML Feature Table
    """
    urn: String!

    """
    A standard Entity Type
    """
    type: EntityType!

    """
    The display name
    """
    name: String!

    """
    Standardized platform urn where the MLFeatureTable is defined
    """
    platform: DataPlatform!

    """
    MLFeatureTable description
    """
    description: String

    """
    Ownership metadata of the MLFeatureTable
    """
    ownership: Ownership

    """
    Additional read-only properties associated witht the ML Feature Table
    """
    properties: MLFeatureTableProperties

    """
    Deprecated! Use properties field instead.
    ModelProperties metadata of the MLFeature
    """
    @deprecated
    featureTableProperties: MLFeatureTableProperties

    """
    References to internal resources related to the MLFeature
    """
    institutionalMemory: InstitutionalMemory

    """
    Status metadata of the MLFeatureTable
    """
    status: Status

    """
    Deprecation
    """
    deprecation: Deprecation

    """
    Edges extending from this entity.
    """
    relationships(input: RelationshipsInput!): EntityRelationshipsResult
}

type MLFeatureTableProperties {

    description: String

    mlFeatures: [MLFeature]

    mlPrimaryKeys: [MLPrimaryKey]
}

type HyperParameterMap {
    key: String!
    value: HyperParameterValueType!
}

type StringBox {
    stringValue: String!
}

type IntBox {
    intValue: Int!
}

type FloatBox {
    floatValue: Float!
}

type BooleanBox {
    booleanValue: Boolean!
}

union HyperParameterValueType = StringBox | IntBox | FloatBox | BooleanBox

type MLModelFactorPrompts {
    """
    What are foreseeable salient factors for which MLModel performance may vary, and how were these determined?
    """
    relevantFactors: [MLModelFactors!]

    """
    Which factors are being reported, and why were these chosen?
    """
    evaluationFactors: [MLModelFactors!]
}

type MLModelFactors {
    """
    Distinct categories with similar characteristics that are present in the evaluation data instances.
    """
    groups: [String!]

    """
    Instrumentation used for MLModel
    """
    instrumentation: [String!]

    """
    Environment in which the MLModel is deployed.
    """
    environment: [String!]
}

type QuantitativeAnalyses {
    """
    Link to a dashboard with results showing how the model performed with respect to each factor
    """
    unitaryResults: ResultsType

    """
    Link to a dashboard with results showing how the model performed with respect to the intersection of evaluated factors?
    """
    intersectionalResults: ResultsType
}

union ResultsType = StringBox

type CaveatsAndRecommendations {
    """
    Caveats on using this MLModel
    """
    caveats: CaveatDetails

    """
    Recommendations on where this MLModel should be used.
    """
    recommendations: String

    """
    Ideal characteristics of an evaluation dataset for this MLModel
    """
    idealDatasetCharacteristics: [String!]
}

type CaveatDetails {
    """
    Did the results suggest any further testing?
    """
    needsFurtherTesting: Boolean

    """
    Caveat Description
    """
    caveatDescription: String

    """
    Relevant groups that were not represented in the evaluation dataset?
    """
    groupsNotRepresented: [String!]
}

type EthicalConsiderations {
    """
    Does the model use any sensitive data (e.g., protected classes)?
    """
    data: [String!]

    """
    Is the model intended to inform decisions about matters central to human life or flourishing – e.g., health or safety? Or could it be used in such a way?
    """
    humanLife: [String!]

    """
    What risk mitigation strategies were used during model development?
    """
    mitigations: [String!]

    """
    What risks may be present in model usage? Try to identify the potential recipients, likelihood, and magnitude of harms. If these cannot be determined, note that they were considered but remain unknown.
    """
    risksAndHarms: [String!]

    """
    Are there any known model use cases that are especially fraught? This may connect directly to the intended use section
    """
    useCases: [String!]
}

type BaseData {
    """
    Dataset used for the Training/Evaluation of the MLModel
    """
    dataset: String!

    """
    Motivation to pick these datasets
    """
    motivation: String

    """
    Details of Data Proprocessing
    """
    preProcessing: [String!]
}

type Metrics {
    """
    Measures of ML Model performance
    """
    performanceMeasures: [String!]

    """
    Decision Thresholds used (if any)?
    """
    decisionThreshold: [String!]
}

type IntendedUse {
    """
    Primary Use cases for the model.
    """
    primaryUses: [String!]

    """
    Primary Intended Users
    """
    primaryUsers: [IntendedUserType!]

    """
    Out of scope uses of the MLModel
    """
    outOfScopeUses: [String!]
}

enum IntendedUserType {
    """
    Developed for Enterprise Users
    """
    ENTERPRISE

    """
    Developed for Hobbyists
    """
    HOBBY

    """
    Developed for Entertainment Purposes
    """
    ENTERTAINMENT
}

type SourceCode {
    """
    Source Code along with types
    """
    sourceCode: [SourceCodeUrl!]
}

type SourceCodeUrl {
    """
    Source Code Url Types
    """
    type: SourceCodeUrlType!

    """
    Source Code Url
    """
    sourceCodeUrl: String!
}

enum SourceCodeUrlType {
    """
    MLModel Source Code
    """
    ML_MODEL_SOURCE_CODE

    """
    Training Pipeline Source Code
    """
    TRAINING_PIPELINE_SOURCE_CODE

    """
    Evaluation Pipeline Source Code
    """
    EVALUATION_PIPELINE_SOURCE_CODE
}

type Cost {
    """
    Type of Cost Code
    """
    costType: CostType!

    """
    Code to which the Cost of this entity should be attributed to i.e. organizational cost ID
    """
    costValue: CostValue!
}

type CostValue {
    """
    Organizational Cost ID
    """
    costId: Float

    """
    Organizational Cost Code
    """
    costCode: String
}

enum CostType {
    """
    Org Cost Type to which the Cost of this entity should be attributed to
    """
    ORG_COST_TYPE
}

"""
Information about Metadata Entity deprecation status.
"""
type Deprecation {
    """
    Whether the entity has been deprecated by owner
    """
    deprecated: Boolean!

    """
    The time user plan to decommission this entity
    """
    decommissionTime: Long

    """
    Additional information about the entity deprecation plan
    """
    note: String!

    """
    The user who will be credited for modifying this deprecation content
    """
    actor: String
}

"""
Input provided when updating the association between a Metadata Entity and a Glossary Term
"""
input TermUpdateInput {
    """
    The primary key (urn) of the Glossary Term to add / remove
    """
    termUrn: String!

    """
    The target Metadata Entity to add / remove the Glossary Term from
    """
    targetUrn: String!

    """
    An optional type of a sub resource to attach the Glossary Term to
    """
    subResourceType: String

    """
    An optional sub resource identifier to attach the Glossary Term to
    """
    subResource: String
}

"""
Input provided when updating the association between a Metadata Entity and a Tag
"""
input TagUpdateInput {
    """
    The primary key (urn) of the Tag to add / remove
    """
    tagUrn: String!

    """
    The target Metadata Entity to add / remove the Tag to
    """
    targetUrn: String!

    """
    An optional type of a sub resource to attach the Tag to
    """
    subResourceType: String

    """
    An optional sub resource identifier to attach the Tag to
    """
    subResource: String
}
plugins {
    id 'java'
    id "io.github.kobylynskyi.graphql.codegen" version "4.1.1"
}

apply from: '../gradle/coverage/java-coverage.gradle'

dependencies {
    implementation project(':metadata-service:restli-client-api')
    implementation project(':metadata-service:auth-impl')
    implementation project(':metadata-service:auth-config')
    implementation project(':metadata-service:configuration')
    implementation project(':metadata-service:services')
    implementation project(':metadata-io')
    implementation project(':metadata-utils')
    implementation project(':metadata-models')

    implementation externalDependency.graphqlJava
    implementation externalDependency.graphqlJavaScalars
    implementation externalDependency.antlr4Runtime
    implementation externalDependency.antlr4
    implementation externalDependency.guava
    implementation externalDependency.opentelemetryAnnotations

    implementation externalDependency.slf4jApi
    implementation externalDependency.springContext
    compileOnly externalDependency.lombok
    annotationProcessor externalDependency.lombok

    testImplementation externalDependency.mockito
    testImplementation externalDependency.testng
}

graphqlCodegen {
    // For options: https://github.com/kobylynskyi/graphql-java-codegen/blob/master/docs/codegen-options.md
    graphqlSchemaPaths = (
        fileTree(dir: "${projectDir}/src/main/resources", include: "*.graphql").files +
        fileTree(dir: "${projectDir}/src/main/resources/graphql/schema", include: "**/*.graphql").files
    ).collect { it.absolutePath }
    outputDir = new File("${projectDir}/src/mainGeneratedGraphQL/java")
    packageName = "com.linkedin.datahub.graphql.generated"
    generateToString = true
    generateApis = true
    generateParameterizedFieldsResolvers = false
    modelValidationAnnotation = "@javax.annotation.Nonnull"
    customTypesMapping = [
        Long: "Long",
        Float: "Float"
    ]
}

task debugSchemaLoading {
    doLast {

        def extensions = fileTree(dir: "${projectDir}/src/main/resources/graphql/schema")
            .include("**/*.graphql")
            .files

        println "\nExtensions found:"
        extensions.each { file ->
            println "- ${file.absolutePath}"
        }
    }
}

task listGraphQLFiles {
    doLast {
        def baseFiles = fileTree(dir: "${projectDir}/src/main/resources", include: "*.graphql")
        def extensionFiles = fileTree(dir: "${projectDir}/src/main/resources/graphql/schema", include: "**/*.graphql")

        println "\nBase GraphQL files found:"
        baseFiles.each { file ->
            println "- ${file.absolutePath}"
        }

        println "\nExtension GraphQL files found:"
        extensionFiles.each { file ->
            println "- ${file.absolutePath}"
        }
    }
}

clean {
    delete 'src/mainGeneratedGraphQL'
}

tasks.withType(Checkstyle) {
    exclude "**/generated/**"
}

compileJava.dependsOn 'graphqlCodegen'
sourceSets.main.java.srcDir "$projectDir/src/mainGeneratedGraphQL/java"

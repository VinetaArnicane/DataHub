apply plugin: 'scala'

def findPlayHome(){
    project.ext.playHome = System.getenv()['ACTIVATOR_HOME']
    if (null == project.ext.playHome) {
        throw new GradleException('ACTIVATOR_HOME env variable not set!')
    }
    project.ext.playExec = "${playHome}/bin/activator"
}

findPlayHome()

configurations{
    //Configuration containing sbt generated .class files
    //This is needed for IDEs, because they cannot compile
    //play templates by themselves.
    playManaged

    //Libraries needed at compilation time but not to be
    //exported as part of the distribution
    provided

    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'log4j', module: 'log4j'
}

dependencies{
    // User defined libraries (will be copied to lib/ before `play compile`)
    compile externalDependency.play
    compile externalDependency.play_java_jdbc
    compile externalDependency.play_java_ws
    compile externalDependency.play_cache
    compile externalDependency.play_filter
    compile externalDependency.spring_jdbc
    compile externalDependency.mockito

    provided project(":wherehows-common")

    // playManaged files('target/scala-2.9.1/classes_managed')
}

// optional: if using 'idea' plugin
idea {
    module{
        scopes.COMPILE.plus += [configurations.playManaged]
        scopes.PROVIDED.plus += [configurations.provided]
    }
}

task copyPlayLibs(type: Copy){
    from configurations.provided
    into 'lib'
}

task compileJava (overwrite: true, type: Exec, dependsOn: copyPlayLibs) {
    commandLine playExec, 'compile'
}

task test (overwrite: true, type: Exec, dependsOn: compileJava) {
    commandLine playExec, 'jacoco:cover'
}

jacocoTestReport {
    dependsOn "test"
    sourceDirectories = files("src/main/java")
    classDirectories = files("target/scala-2.10/classes")
    executionData = files("target/scala-2.10/jacoco/jacoco.exec")
}

sourceSets.main{
    java.srcDir 'app'
    compileClasspath += configurations.provided
}

// delegate gradle java task to play command

task clean (overwrite: true, type: Exec) {
    delete "lib/"
    delete "build/"
    commandLine playExec, 'clean'
}

task "build" (type: Exec, dependsOn: clean, overwrite: true) {
    commandLine playExec, 'stage'
}

task "assemble" (type: Exec, dependsOn: clean, overwrite: true) {
    commandLine playExec, 'stage'
}

task "dist" (type: Exec, overwrite: true) {
    commandLine playExec, 'dist'
}

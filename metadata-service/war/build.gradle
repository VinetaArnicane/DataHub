plugins {
  id 'war'
  id 'com.palantir.docker'
}

apply from: "../../gradle/versioning/versioning.gradle"

ext {
  docker_repo = 'datahub-gms'
}

ext.apiProject = project(':metadata-service:restli-api')

dependencies {
implementation project(':metadata-service:factories')
implementation project(':metadata-service:auth-filter')
implementation project(':metadata-service:servlet')
implementation project(':metadata-service:auth-servlet-impl')
implementation project(':metadata-service:graphql-servlet-impl')
implementation project(':metadata-service:health-servlet')
implementation project(':metadata-service:openapi-servlet')
implementation project(':metadata-service:schema-registry-servlet')
implementation project(':metadata-jobs:mce-consumer')
implementation project(':metadata-jobs:mae-consumer')
implementation project(':metadata-jobs:pe-consumer')

implementation externalDependency.awsSecretsManagerJdbc
implementation externalDependency.h2
implementation externalDependency.mariadbConnector
implementation externalDependency.mysqlConnector
implementation externalDependency.postgresql
implementation externalDependency.springWebMVC

implementation spec.product.pegasus.restliDocgen
implementation spec.product.pegasus.restliSpringBridge

implementation externalDependency.log4jCore
implementation externalDependency.log4j2Api
implementation externalDependency.logbackClassic
  implementation externalDependency.awsMskIamAuth
  testImplementation externalDependency.logbackClassic
  implementation externalDependency.charle
}
configurations.all{
  exclude group: "com.charleskorn.kaml", module:"kaml"

}
configurations {
  jetty9
}

dependencies {
  jetty9 "org.eclipse.jetty:jetty-runner:9.4.46.v20220331"
}

task run(type: JavaExec, dependsOn: build) {
  main = "org.eclipse.jetty.runner.Runner"
  args = ["${projectDir}/build/libs/war.war"]
  classpath configurations.jetty9
}

war {
  archiveFileName = "war.war"
}

docker {
  name "${docker_registry}/${docker_repo}:v${version}"
  version "v${version}"
  dockerfile file("${rootProject.projectDir}/docker/${docker_repo}/Dockerfile")
  files war.outputs.files
  files fileTree(rootProject.projectDir) {
    include 'docker/monitoring/*'
    include "docker/${docker_repo}/*"
    include 'metadata-models/src/main/resources/*'
  }
  tag("Debug", "${docker_registry}/${docker_repo}:debug")

  // platform('linux/arm64', 'linux/amd64')
  buildx(true)
  load(true)
  push(false)
}
tasks.getByName("docker").dependsOn([build, war])

task cleanLocalDockerImages {
  doLast {
    rootProject.ext.cleanLocalDockerImages(docker_registry, docker_repo, "v${version}")
  }
}
dockerClean.finalizedBy(cleanLocalDockerImages)

{
  "models" : [ {
    "type" : "record",
    "name" : "AuditStamp",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
    "fields" : [ {
      "name" : "time",
      "type" : {
        "type" : "typeref",
        "name" : "Time",
        "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
        "ref" : "long"
      },
      "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
    }, {
      "name" : "actor",
      "type" : {
        "type" : "typeref",
        "name" : "Urn",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      },
      "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
    }, {
      "name" : "impersonator",
      "type" : "Urn",
      "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "ChangeAuditStamps",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations",
    "fields" : [ {
      "name" : "created",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
    }, {
      "name" : "deleted",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "DataProcessUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized process identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DataProcessUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized process identifier.",
        "entityType" : "dataProcess",
        "fields" : [ {
          "doc" : "process name i.e. an ETL job name",
          "maxLength" : 25,
          "name" : "name",
          "type" : "string"
        }, {
          "doc" : "Standardized Orchestrator  where data process is defined.",
          "name" : "orchestrator",
          "type" : "string"
        }, {
          "doc" : "Fabric type where dataset belongs to or where it was generated.",
          "name" : "origin",
          "type" : "com.linkedin.common.FabricType"
        } ],
        "maxLength" : 284,
        "name" : "DataProcess",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:wherehows"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "DatasetUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized dataset identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized dataset identifier.",
        "entityType" : "dataset",
        "fields" : [ {
          "doc" : "Standardized platform urn where dataset is defined.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Dataset native name e.g. <db>.<table>, /dir/subdir/<name>, or <name>",
          "maxLength" : 210,
          "name" : "datasetName",
          "type" : "string"
        }, {
          "doc" : "Fabric type where dataset belongs to or where it was generated.",
          "name" : "origin",
          "type" : "com.linkedin.common.FabricType"
        } ],
        "maxLength" : 284,
        "name" : "Dataset",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "enum",
    "name" : "FabricType",
    "namespace" : "com.linkedin.common",
    "doc" : "Fabric group type",
    "symbols" : [ "DEV", "EI", "PROD", "CORP" ],
    "symbolDocs" : {
      "CORP" : "Designates corporation fabrics",
      "DEV" : "Designates development fabrics",
      "EI" : "Designates early-integration (staging) fabrics",
      "PROD" : "Designates production fabrics"
    }
  }, {
    "type" : "record",
    "name" : "Owner",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information",
    "fields" : [ {
      "name" : "owner",
      "type" : "Urn",
      "doc" : "Owner URN, e.g. urn:li:corpuser:ldap, urn:li:corpGroup:group_name, and urn:li:multiProduct:mp_name"
    }, {
      "name" : "type",
      "type" : {
        "type" : "enum",
        "name" : "OwnershipType",
        "doc" : "Owner category or owner role",
        "symbols" : [ "DEVELOPER", "DATAOWNER", "DELEGATE", "PRODUCER", "CONSUMER", "STAKEHOLDER" ],
        "symbolDocs" : {
          "CONSUMER" : "A person, group, or service that consumes the data",
          "DATAOWNER" : "A person or group that is owning the data",
          "DELEGATE" : "A person or a group that overseas the operation, e.g. a DBA or SRE.",
          "DEVELOPER" : "A person or group that is in charge of developing the code",
          "PRODUCER" : "A person, group, or service that produces/generates the data",
          "STAKEHOLDER" : "A person or a group that has direct business interest"
        }
      },
      "doc" : "The type of the ownership"
    }, {
      "name" : "source",
      "type" : {
        "type" : "record",
        "name" : "OwnershipSource",
        "doc" : "Source/provider of the ownership information",
        "fields" : [ {
          "name" : "type",
          "type" : {
            "type" : "enum",
            "name" : "OwnershipSourceType",
            "symbols" : [ "AUDIT", "DATABASE", "FILE_SYSTEM", "ISSUE_TRACKING_SYSTEM", "MANUAL", "SERVICE", "SOURCE_CONTROL", "OTHER" ],
            "symbolDocs" : {
              "AUDIT" : "Auditing system or audit logs",
              "DATABASE" : "Database, e.g. GRANTS table",
              "FILE_SYSTEM" : "File system, e.g. file/directory owner",
              "ISSUE_TRACKING_SYSTEM" : "Issue tracking system, e.g. Jira",
              "MANUAL" : "Manually provided by a user",
              "OTHER" : "Other sources",
              "SERVICE" : "Other ownership-like service, e.g. Nuage, ACL service etc",
              "SOURCE_CONTROL" : "SCM system, e.g. GIT, SVN"
            }
          },
          "doc" : "The type of the source"
        }, {
          "name" : "url",
          "type" : "string",
          "doc" : "A reference URL for the source",
          "optional" : true
        } ]
      },
      "doc" : "Source information for the ownership",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Ownership",
    "namespace" : "com.linkedin.common",
    "doc" : "Ownership information of an entity.",
    "fields" : [ {
      "name" : "owners",
      "type" : {
        "type" : "array",
        "items" : "Owner"
      },
      "doc" : "List of owners of the entity."
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "Audit stamp containing who last modified the record and when."
    } ]
  }, "com.linkedin.common.OwnershipSource", "com.linkedin.common.OwnershipSourceType", "com.linkedin.common.OwnershipType", {
    "type" : "record",
    "name" : "Status",
    "namespace" : "com.linkedin.common",
    "doc" : "The status metadata of an entity, e.g. dataset, metric, feature, etc.",
    "fields" : [ {
      "name" : "removed",
      "type" : "boolean",
      "doc" : "whether the entity is removed or not",
      "default" : false
    } ]
  }, "com.linkedin.common.Time", {
    "type" : "typeref",
    "name" : "Uri",
    "namespace" : "com.linkedin.common",
    "ref" : "string",
    "java" : {
      "class" : "java.net.URI"
    }
  }, "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "VersionTag",
    "namespace" : "com.linkedin.common",
    "doc" : "A resource-defined string representing the resource state for the purpose of concurrency control",
    "fields" : [ {
      "name" : "versionTag",
      "type" : "string",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "DataProcess",
    "namespace" : "com.linkedin.dataprocess",
    "doc" : "Spec. for a process. A collection of data conforming to a single schema that can evolve over time.",
    "include" : [ {
      "type" : "record",
      "name" : "DataProcessKey",
      "doc" : "Key for process resource",
      "fields" : [ {
        "name" : "orchestrator",
        "type" : "string",
        "doc" : "Standardized orchestration platform urn where process is running. It can be Azure Data Factory or Sqoop script",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      }, {
        "name" : "name",
        "type" : "string",
        "doc" : "Process native name e.g. an ETL process name",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      }, {
        "name" : "origin",
        "type" : "com.linkedin.common.FabricType",
        "doc" : "Fabric type where dataset belongs to or where it was generated."
      } ]
    }, "com.linkedin.common.ChangeAuditStamps", "com.linkedin.common.VersionTag" ],
    "fields" : [ {
      "name" : "id",
      "type" : "long",
      "doc" : "Process unique identifier. System assigned value when a new Process is created.",
      "default" : 0
    }, {
      "name" : "urn",
      "type" : "com.linkedin.common.DataProcessUrn",
      "doc" : "Process urn"
    }, {
      "name" : "uri",
      "type" : "com.linkedin.common.Uri",
      "doc" : "The abstracted such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. Uri should not include any environment specific properties. Some Processs might not have a standardized uri, which makes this field optional (i.e. kafka topic).",
      "optional" : true
    }, {
      "name" : "inputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "input datasets of this process",
      "optional" : true
    }, {
      "name" : "outputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "output datasets of this process",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "DataProcessInfo",
    "namespace" : "com.linkedin.dataprocess",
    "doc" : "The inputs and outputs of this data process",
    "fields" : [ {
      "name" : "inputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "the inputs of the data process",
      "optional" : true
    }, {
      "name" : "outputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "the outputs of the data process",
      "optional" : true
    } ]
  }, "com.linkedin.dataprocess.DataProcessKey", {
    "type" : "typeref",
    "name" : "DataProcessAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a data process",
    "ref" : [ "com.linkedin.common.Ownership", "com.linkedin.common.Status", "com.linkedin.dataprocess.DataProcessInfo" ]
  }, {
    "type" : "record",
    "name" : "DataProcessSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "A metadata snapshot for a specific Data process entity.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.DataProcessUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.DataProcessAspect"
      },
      "doc" : "The list of metadata aspects associated with the data process. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ]
  }, {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  } ],
  "schema" : {
    "name" : "dataProcesses",
    "namespace" : "com.linkedin.dataprocess",
    "path" : "/dataProcesses",
    "schema" : "com.linkedin.dataprocess.DataProcess",
    "doc" : "generated from: com.linkedin.metadata.resources.dataprocess.DataProcesses",
    "collection" : {
      "identifier" : {
        "name" : "dataprocess",
        "type" : "com.linkedin.dataprocess.DataProcessKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ]
      } ],
      "actions" : [ {
        "name" : "backfill",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ],
        "returns" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ],
        "returns" : "com.linkedin.metadata.snapshot.DataProcessSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.DataProcessSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/dataProcesses/{dataprocess}",
        "subresources" : [ {
          "name" : "dataProcessInfo",
          "namespace" : "com.linkedin.dataprocess",
          "path" : "/dataProcesses/{dataprocess}/dataProcessInfo",
          "schema" : "com.linkedin.dataprocess.DataProcessInfo",
          "doc" : "generated from: com.linkedin.metadata.resources.dataprocess.DataProcessInfoResource",
          "collection" : {
            "identifier" : {
              "name" : "dataProcessInfoId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/dataProcesses/{dataprocess}/dataProcessInfo/{dataProcessInfoId}"
            }
          }
        } ]
      }
    }
  }
}
{
  "models" : [ {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "DateGroupingBucket",
    "namespace" : "com.linkedin.temporal",
    "doc" : "Defines a time based grouping bucket.",
    "fields" : [ {
      "name" : "key",
      "type" : "string",
      "doc" : "Key that specifies the column name to be used as the timestamp field for bucketing."
    }, {
      "name" : "granularityMillis",
      "type" : "long",
      "doc" : "Bucket size (like a day/hour etc).",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "GenericTable",
    "namespace" : "com.linkedin.temporal",
    "doc" : "Defines a generic table.",
    "fields" : [ {
      "name" : "columnNames",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "The names of the columns."
    }, {
      "name" : "columnTypes",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "The types of the columns."
    }, {
      "name" : "rows",
      "type" : {
        "type" : "array",
        "items" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "The data rows.",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "GroupingBucket",
    "namespace" : "com.linkedin.temporal",
    "doc" : "Defines the group by bucket definitions for time series requests.",
    "ref" : [ "DateGroupingBucket", {
      "type" : "record",
      "name" : "StringGroupingBucket",
      "doc" : "Defines a string grouping bucket.",
      "fields" : [ {
        "name" : "key",
        "type" : "string",
        "doc" : "Key that specifies the column name to be used for bucketing."
      } ]
    } ]
  }, "com.linkedin.temporal.StringGroupingBucket", {
    "type" : "record",
    "name" : "TemporalStatsResponse",
    "namespace" : "com.linkedin.temporal",
    "fields" : [ {
      "name" : "table",
      "type" : "GenericTable",
      "doc" : "The hits part of the response."
    }, {
      "name" : "lastUpdatedTimeMillis",
      "type" : "long",
      "doc" : "When the index was last updated.",
      "optional" : true
    } ]
  } ],
  "schema" : {
    "name" : "analytics",
    "namespace" : "com.linkedin.analytics",
    "path" : "/analytics",
    "schema" : "com.linkedin.temporal.TemporalStatsResponse",
    "doc" : "Rest.li entry point: /analytics\n\ngenerated from: com.linkedin.metadata.resources.analytics.Analytics",
    "simple" : {
      "supports" : [ ],
      "actions" : [ {
        "name" : "getTemporalStats",
        "parameters" : [ {
          "name" : "entityName",
          "type" : "string"
        }, {
          "name" : "aspectName",
          "type" : "string"
        }, {
          "name" : "metrics",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "buckets",
          "type" : "{ \"type\" : \"array\", \"items\" : \"com.linkedin.temporal.GroupingBucket\" }",
          "optional" : true
        } ],
        "returns" : "com.linkedin.temporal.TemporalStatsResponse"
      } ],
      "entity" : {
        "path" : "/analytics"
      }
    }
  }
}
{
  "models" : [ {
    "type" : "record",
    "name" : "AuditStamp",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
    "fields" : [ {
      "name" : "time",
      "type" : {
        "type" : "typeref",
        "name" : "Time",
        "doc" : "Number of milliseconds since midnight, January 1, 1970 UTC. It must be a positive number",
        "ref" : "long"
      },
      "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
    }, {
      "name" : "actor",
      "type" : {
        "type" : "typeref",
        "name" : "Urn",
        "ref" : "string",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      },
      "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change."
    }, {
      "name" : "impersonator",
      "type" : "Urn",
      "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "ChangeAuditStamps",
    "namespace" : "com.linkedin.common",
    "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into various lifecycle stages, and who acted to move it into those lifecycle stages. The recommended best practice is to include this record in your record schema, and annotate its fields as @readOnly in your resource. See https://github.com/linkedin/rest.li/wiki/Validation-in-Rest.li#restli-validation-annotations",
    "fields" : [ {
      "name" : "created",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
    }, {
      "name" : "lastModified",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
    }, {
      "name" : "deleted",
      "type" : "AuditStamp",
      "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
      "optional" : true
    } ]
  }, {
    "type" : "typeref",
    "name" : "DataPlatformUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized data platforms available",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DataPlatformUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized data platforms available",
        "entityType" : "dataPlatform",
        "fields" : [ {
          "doc" : "data platform name i.e. hdfs, oracle, espresso",
          "maxLength" : 25,
          "name" : "platformName",
          "type" : "string"
        } ],
        "maxLength" : 45,
        "name" : "DataPlatform",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:wherehows"
      }
    }
  }, {
    "type" : "typeref",
    "name" : "DatasetUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized dataset identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetUrn"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized dataset identifier.",
        "entityType" : "dataset",
        "fields" : [ {
          "doc" : "Standardized platform urn where dataset is defined.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Dataset native name e.g. <db>.<table>, /dir/subdir/<name>, or <name>",
          "maxLength" : 210,
          "name" : "datasetName",
          "type" : "string"
        }, {
          "doc" : "Fabric type where dataset belongs to or where it was generated.",
          "name" : "origin",
          "type" : "com.linkedin.common.FabricType"
        } ],
        "maxLength" : 284,
        "name" : "Dataset",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, {
    "type" : "enum",
    "name" : "FabricType",
    "namespace" : "com.linkedin.common",
    "doc" : "Fabric group type",
    "symbols" : [ "DEV", "EI", "PROD", "CORP" ],
    "symbolDocs" : {
      "CORP" : "Designates corporation fabrics",
      "DEV" : "Designates development fabrics",
      "EI" : "Designates early-integration (staging) fabrics",
      "PROD" : "Designates production fabrics"
    }
  }, {
    "type" : "typeref",
    "name" : "JobUrn",
    "namespace" : "com.linkedin.common",
    "doc" : "Standardized job identifier.",
    "ref" : "string",
    "java" : {
      "class" : "com.linkedin.common.urn.JobUrn",
      "coercerClass" : "com.linkedin.common.urn.JobUrnCoercer"
    },
    "validate" : {
      "com.linkedin.common.validator.TypedUrnValidator" : {
        "accessible" : true,
        "constructable" : true,
        "doc" : "Standardized job identifier.",
        "entityType" : "job",
        "fields" : [ {
          "doc" : "",
          "maxLength" : 36,
          "name" : "name",
          "type" : "string"
        }, {
          "doc" : "Standardized platform urn where dataset is defined.",
          "name" : "platform",
          "type" : "com.linkedin.common.urn.DataPlatformUrn"
        }, {
          "doc" : "Fabric type where dataset belongs to or where it was generated.",
          "name" : "origin",
          "type" : "com.linkedin.common.FabricType"
        }, {
          "doc" : "",
          "maxLength" : 100,
          "name" : "description",
          "type" : "string"
        } ],
        "maxLength" : 100,
        "name" : "Job",
        "namespace" : "li",
        "owners" : [ "urn:li:corpuser:fbar", "urn:li:corpuser:bfoo" ],
        "owningTeam" : "urn:li:internalTeam:datahub"
      }
    }
  }, "com.linkedin.common.Time", {
    "type" : "typeref",
    "name" : "Uri",
    "namespace" : "com.linkedin.common",
    "ref" : "string",
    "java" : {
      "class" : "java.net.URI"
    }
  }, "com.linkedin.common.Urn", {
    "type" : "record",
    "name" : "VersionTag",
    "namespace" : "com.linkedin.common",
    "doc" : "A resource-defined string representing the resource state for the purpose of concurrency control",
    "fields" : [ {
      "name" : "versionTag",
      "type" : "string",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "Job",
    "namespace" : "com.linkedin.job",
    "doc" : "Spec. for a job. A collection of data conforming to a single schema that can evolve over time. This is equivalent to a Table in most data platforms. Espresso dataset: Identity.Profile; oracle dataset: member2.member_profile; hdfs dataset: /data/databases/JOBS/JOB_APPLICATIONS; kafka: PageViewEvent",
    "include" : [ {
      "type" : "record",
      "name" : "JobKey",
      "doc" : "Key for job resource",
      "fields" : [ {
        "name" : "platform",
        "type" : "com.linkedin.common.DataPlatformUrn",
        "doc" : "Standardized platform urn where dataset is defined. The data platform Urn (urn:li:platform:{platform_name})",
        "validate" : {
          "com.linkedin.dataset.rest.validator.DataPlatformValidator" : { }
        }
      }, {
        "name" : "name",
        "type" : "string",
        "doc" : "Job native name e.g. an ETL job name",
        "validate" : {
          "strlen" : {
            "max" : 500,
            "min" : 1
          }
        }
      }, {
        "name" : "origin",
        "type" : "com.linkedin.common.FabricType",
        "doc" : "Fabric type where dataset belongs to or where it was generated."
      } ]
    }, "com.linkedin.common.ChangeAuditStamps", "com.linkedin.common.VersionTag" ],
    "fields" : [ {
      "name" : "id",
      "type" : "long",
      "doc" : "Job unique identifier. System assigned value when a new Job is created.",
      "default" : 0
    }, {
      "name" : "urn",
      "type" : "com.linkedin.common.JobUrn",
      "doc" : "Job urn"
    }, {
      "name" : "description",
      "type" : "string",
      "doc" : "Description for Job",
      "default" : ""
    }, {
      "name" : "platformNativeType",
      "type" : {
        "type" : "enum",
        "name" : "PlatformNativeType",
        "symbols" : [ "TABLE", "VIEW", "DIRECTORY", "STREAM", "BUCKET" ],
        "symbolDocs" : {
          "BUCKET" : "Bucket in key value store",
          "DIRECTORY" : "Directory in file system",
          "STREAM" : "Stream",
          "TABLE" : "Table",
          "VIEW" : "View"
        }
      },
      "doc" : "The native format for the data platform",
      "optional" : true
    }, {
      "name" : "uri",
      "type" : "com.linkedin.common.Uri",
      "doc" : "The abstracted such as hdfs:///data/tracking/PageViewEvent, file:///dir/file_name. Uri should not include any environment specific properties. Some Jobs might not have a standardized uri, which makes this field optional (i.e. kafka topic).",
      "optional" : true
    }, {
      "name" : "inputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "input datasets of this job",
      "optional" : true
    }, {
      "name" : "outputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "output datasets of this job",
      "optional" : true
    } ]
  }, {
    "type" : "record",
    "name" : "JobInfo",
    "namespace" : "com.linkedin.job",
    "doc" : "The inputs and outputs of this job",
    "fields" : [ {
      "name" : "inputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "the inputs of the job",
      "optional" : true
    }, {
      "name" : "outputs",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.DatasetUrn"
      },
      "doc" : "the outputs of the job",
      "optional" : true
    } ]
  }, "com.linkedin.job.JobKey", "com.linkedin.job.PlatformNativeType", {
    "type" : "typeref",
    "name" : "JobAspect",
    "namespace" : "com.linkedin.metadata.aspect",
    "doc" : "A union of all supported metadata aspects for a Job",
    "ref" : [ "com.linkedin.job.JobInfo" ]
  }, {
    "type" : "record",
    "name" : "AggregationMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "fields" : [ {
      "name" : "name",
      "type" : "string",
      "doc" : "The name of the aggregation, e.g, platform, origin"
    }, {
      "name" : "aggregations",
      "type" : {
        "type" : "map",
        "values" : "long"
      },
      "doc" : "List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc"
    } ]
  }, {
    "type" : "record",
    "name" : "AutoCompleteResult",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the auto complete result",
    "fields" : [ {
      "name" : "query",
      "type" : "string",
      "doc" : "The original chars typed by user"
    }, {
      "name" : "suggestions",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "A list of typeahead suggestions"
    } ]
  }, {
    "type" : "enum",
    "name" : "Condition",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The matching condition in a filter criterion",
    "symbols" : [ "CONTAIN", "END_WITH", "EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL_TO", "LESS_THAN", "LESS_THAN_OR_EQUAL_TO", "START_WITH" ],
    "symbolDocs" : {
      "CONTAIN" : "Represent the relation: String field contains value, e.g. name contains Profile",
      "END_WITH" : "Represent the relation: String field ends with value, e.g. name ends with Event",
      "EQUAL" : "Represent the relation: field = value, e.g. platform = hdfs",
      "GREATER_THAN" : "Represent the relation greater than, e.g. ownerCount > 5",
      "GREATER_THAN_OR_EQUAL_TO" : "Represent the relation greater than or equal to, e.g. ownerCount >= 5",
      "LESS_THAN" : "Represent the relation less than, e.g. ownerCount < 3",
      "LESS_THAN_OR_EQUAL_TO" : "Represent the relation less than or equal to, e.g. ownerCount <= 3",
      "START_WITH" : "Represent the relation: String field starts with value, e.g. name starts with PageView"
    }
  }, {
    "type" : "record",
    "name" : "Criterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "A criterion for matching a field with given value",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that the criterion refers to"
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value of the intended field"
    }, {
      "name" : "condition",
      "type" : "Condition",
      "doc" : "The condition for the criterion, e.g. EQUAL, START_WITH",
      "default" : "EQUAL"
    } ]
  }, {
    "type" : "record",
    "name" : "Filter",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The filter for finding an record or a collection of records",
    "fields" : [ {
      "name" : "criteria",
      "type" : {
        "type" : "array",
        "items" : "Criterion"
      },
      "doc" : "A list of criteria the filter applies to the query"
    } ]
  }, {
    "type" : "record",
    "name" : "SearchResultMetadata",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "The model for the search result",
    "fields" : [ {
      "name" : "searchResultMetadatas",
      "type" : {
        "type" : "array",
        "items" : "AggregationMetadata"
      },
      "doc" : "A list of search result metadata such as aggregations"
    }, {
      "name" : "urns",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.common.Urn"
      },
      "doc" : "A list of urns corresponding to search documents (in order) as returned by the search index"
    } ]
  }, {
    "type" : "record",
    "name" : "SortCriterion",
    "namespace" : "com.linkedin.metadata.query",
    "doc" : "Sort order along with the field to sort it on, to be applied to the results.",
    "fields" : [ {
      "name" : "field",
      "type" : "string",
      "doc" : "The name of the field that sorting has to be applied to"
    }, {
      "name" : "order",
      "type" : {
        "type" : "enum",
        "name" : "SortOrder",
        "doc" : "The order used to sort the results",
        "symbols" : [ "ASCENDING", "DESCENDING" ],
        "symbolDocs" : {
          "ASCENDING" : "If results need to be sorted in ascending order",
          "DESCENDING" : "If results need to be sorted in descending order"
        }
      },
      "doc" : "The order to sort the results i.e. ASCENDING or DESCENDING"
    } ]
  }, "com.linkedin.metadata.query.SortOrder", {
    "type" : "record",
    "name" : "JobSnapshot",
    "namespace" : "com.linkedin.metadata.snapshot",
    "doc" : "A metadata snapshot for a specific Job entity.",
    "fields" : [ {
      "name" : "urn",
      "type" : "com.linkedin.common.JobUrn",
      "doc" : "URN for the entity the metadata snapshot is associated with."
    }, {
      "name" : "aspects",
      "type" : {
        "type" : "array",
        "items" : "com.linkedin.metadata.aspect.JobAspect"
      },
      "doc" : "The list of metadata aspects associated with the Job. Depending on the use case, this can either be all, or a selection, of supported aspects."
    } ]
  }, {
    "type" : "record",
    "name" : "EmptyRecord",
    "namespace" : "com.linkedin.restli.common",
    "doc" : "An literally empty record.  Intended as a marker to indicate the absence of content where a record type is required.  If used the underlying DataMap *must* be empty, EmptyRecordValidator is provided to help enforce this.  For example,  CreateRequest extends Request<EmptyRecord> to indicate it has no response body.   Also, a ComplexKeyResource implementation that has no ParamKey should have a signature like XyzResource implements ComplexKeyResource<XyzKey, EmptyRecord, Xyz>.",
    "fields" : [ ],
    "validate" : {
      "com.linkedin.restli.common.EmptyRecordValidator" : { }
    }
  } ],
  "schema" : {
    "name" : "jobs",
    "namespace" : "com.linkedin.job",
    "path" : "/jobs",
    "schema" : "com.linkedin.job.Job",
    "doc" : "generated from: com.linkedin.metadata.resources.job.Jobs",
    "collection" : {
      "identifier" : {
        "name" : "job",
        "type" : "com.linkedin.job.JobKey",
        "params" : "com.linkedin.restli.common.EmptyRecord"
      },
      "supports" : [ "batch_get", "get" ],
      "methods" : [ {
        "method" : "get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ]
      }, {
        "method" : "batch_get",
        "parameters" : [ {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ]
      } ],
      "finders" : [ {
        "name" : "search",
        "parameters" : [ {
          "name" : "input",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter",
          "optional" : true
        }, {
          "name" : "sort",
          "type" : "com.linkedin.metadata.query.SortCriterion",
          "optional" : true
        } ],
        "metadata" : {
          "type" : "com.linkedin.metadata.query.SearchResultMetadata"
        },
        "pagingSupported" : true
      } ],
      "actions" : [ {
        "name" : "autocomplete",
        "parameters" : [ {
          "name" : "query",
          "type" : "string"
        }, {
          "name" : "field",
          "type" : "string"
        }, {
          "name" : "filter",
          "type" : "com.linkedin.metadata.query.Filter"
        }, {
          "name" : "limit",
          "type" : "int"
        } ],
        "returns" : "com.linkedin.metadata.query.AutoCompleteResult"
      }, {
        "name" : "backfill",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ],
        "returns" : "{ \"type\" : \"array\", \"items\" : \"string\" }"
      }, {
        "name" : "getSnapshot",
        "parameters" : [ {
          "name" : "urn",
          "type" : "string"
        }, {
          "name" : "aspects",
          "type" : "{ \"type\" : \"array\", \"items\" : \"string\" }",
          "default" : "[]"
        } ],
        "returns" : "com.linkedin.metadata.snapshot.JobSnapshot"
      }, {
        "name" : "ingest",
        "parameters" : [ {
          "name" : "snapshot",
          "type" : "com.linkedin.metadata.snapshot.JobSnapshot"
        } ]
      } ],
      "entity" : {
        "path" : "/jobs/{job}",
        "subresources" : [ {
          "name" : "jobInfo",
          "namespace" : "com.linkedin.job",
          "path" : "/jobs/{job}/jobInfo",
          "schema" : "com.linkedin.job.JobInfo",
          "doc" : "Rest.li entry point: /datasets/{datasetKey}/jobInfo\n\ngenerated from: com.linkedin.metadata.resources.job.JobInfoResource",
          "collection" : {
            "identifier" : {
              "name" : "jobInfoId",
              "type" : "long"
            },
            "supports" : [ "create", "get" ],
            "methods" : [ {
              "method" : "create"
            }, {
              "method" : "get"
            } ],
            "entity" : {
              "path" : "/jobs/{job}/jobInfo/{jobInfoId}"
            }
          }
        } ]
      }
    }
  }
}
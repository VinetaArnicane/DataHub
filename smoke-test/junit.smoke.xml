<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="8" tests="58" time="130.300" timestamp="2022-02-01T22:16:02.545130" hostname="XXX-2.local"><testcase classname="test_e2e" name="test_healthchecks" time="0.150" /><testcase classname="test_e2e" name="test_ingestion_via_rest" time="1.839" /><testcase classname="test_e2e" name="test_ingestion_usage_via_rest" time="0.437" /><testcase classname="test_e2e" name="test_ingestion_via_kafka" time="61.148" /><testcase classname="test_e2e" name="test_run_ingestion" time="0.001" /><testcase classname="test_e2e" name="test_gms_get_user" time="0.016" /><testcase classname="test_e2e" name="test_gms_get_dataset[urn:li:dataPlatform:kafka-SampleKafkaDataset-PROD]" time="0.019" /><testcase classname="test_e2e" name="test_gms_get_dataset[urn:li:dataPlatform:bigquery-bigquery-public-data.covid19_geotab_mobility_impact.us_border_wait_times-PROD]" time="0.015" /><testcase classname="test_e2e" name="test_gms_batch_get_v2" time="0.014" /><testcase classname="test_e2e" name="test_gms_search_dataset[covid-1]" time="0.023" /><testcase classname="test_e2e" name="test_gms_search_dataset[sample-3]" time="0.021" /><testcase classname="test_e2e" name="test_gms_search_across_entities[covid-1]" time="0.152" /><testcase classname="test_e2e" name="test_gms_search_across_entities[sample-3]" time="0.059" /><testcase classname="test_e2e" name="test_gms_usage_fetch" time="0.038" /><testcase classname="test_e2e" name="test_frontend_auth" time="0.029" /><testcase classname="test_e2e" name="test_frontend_browse_datasets" time="0.030" /><testcase classname="test_e2e" name="test_frontend_search_datasets[covid-1]" time="0.029" /><testcase classname="test_e2e" name="test_frontend_search_datasets[sample-3]" time="0.033" /><testcase classname="test_e2e" name="test_frontend_search_datasets[-1]" time="0.044" /><testcase classname="test_e2e" name="test_frontend_search_across_entities[covid-1]" time="0.024" /><testcase classname="test_e2e" name="test_frontend_search_across_entities[sample-3]" time="0.026" /><testcase classname="test_e2e" name="test_frontend_search_across_entities[-1]" time="0.123" /><testcase classname="test_e2e" name="test_frontend_user_info" time="0.013" /><testcase classname="test_e2e" name="test_frontend_datasets[urn:li:dataPlatform:kafka-SampleKafkaDataset-PROD]" time="0.018" /><testcase classname="test_e2e" name="test_frontend_datasets[urn:li:dataPlatform:bigquery-bigquery-public-data.covid19_geotab_mobility_impact.us_border_wait_times-PROD]" time="0.018" /><testcase classname="test_e2e" name="test_ingest_with_system_metadata" time="0.031" /><testcase classname="test_e2e" name="test_ingest_with_blank_system_metadata" time="0.018" /><testcase classname="test_e2e" name="test_ingest_without_system_metadata" time="0.024" /><testcase classname="test_e2e" name="test_frontend_list_policies" time="0.036" /><testcase classname="test_e2e" name="test_frontend_update_policy" time="0.047" /><testcase classname="test_e2e" name="test_frontend_delete_policy" time="0.066" /><testcase classname="test_e2e" name="test_frontend_create_policy" time="1.065" /><testcase classname="test_e2e" name="test_frontend_app_config" time="0.018" /><testcase classname="test_e2e" name="test_frontend_me_query" time="0.020" /><testcase classname="test_e2e" name="test_list_users" time="0.018" /><testcase classname="test_e2e" name="test_list_groups" time="0.020" /><testcase classname="test_e2e" name="test_add_remove_members_from_group" time="2.110" /><testcase classname="test_e2e" name="test_remove_user" time="0.049" /><testcase classname="test_e2e" name="test_remove_group" time="0.055" /><testcase classname="test_e2e" name="test_create_group" time="0.043" /><testcase classname="test_e2e" name="test_home_page_recommendations" time="0.094" /><testcase classname="test_e2e" name="test_search_results_recommendations" time="0.017" /><testcase classname="test_e2e" name="test_generate_personal_access_token" time="0.041" /><testcase classname="test_e2e" name="test_stateful_ingestion" time="3.291" /><testcase classname="test_e2e" name="test_stateful_ingestion_kafka" time="1.352" /><testcase classname="test_rapid" name="test_ingestion_via_rest_rapid" time="2.286" /><testcase classname="tests.test_stateful_ingestion_kafka" name="test_stateful_ingestion_kafka" time="0.000"><skipped type="pytest.skip" message="test_stateful_ingestion_kafka depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_stateful_ingestion_kafka depends on test_healthchecks</skipped></testcase><testcase classname="tests.cypress.integration_test" name="test_run_cypress" time="49.141"><failure message="assert 1 == 0&#10;  +1&#10;  -0">frontend_session = &lt;requests.sessions.Session object at 0x7ff5c02fbeb0&gt;, wait_for_healthchecks = None

    def test_run_cypress(frontend_session, wait_for_healthchecks):
        command = f"npx cypress run"
        print('starting?')
        proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd="tests/cypress")
        stdout = proc.stdout.read()
        stderr = proc.stderr.read()
        return_code = proc.wait()
        print(stdout.decode("utf-8"))
        print('stderr output:')
        print(stderr.decode("utf-8"))
        print('return code', return_code)
&gt;       assert(return_code == 0)
E       assert 1 == 0
E         +1
E         -0

tests/cypress/integration_test.py:28: AssertionError</failure></testcase><testcase classname="tests.domains.domains_test" name="test_healthchecks" time="0.003" /><testcase classname="tests.domains.domains_test" name="test_create_list_get_domain" time="2.213" /><testcase classname="tests.domains.domains_test" name="test_set_unset_domain" time="0.560" /><testcase classname="tests.managed-ingestion.managed_ingestion_test" name="test_create_list_get_remove_secret" time="0.001"><skipped type="pytest.skip" message="test_create_list_get_remove_secret depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_create_list_get_remove_secret depends on test_healthchecks</skipped></testcase><testcase classname="tests.managed-ingestion.managed_ingestion_test" name="test_create_list_get_remove_ingestion_source" time="0.001"><skipped type="pytest.skip" message="test_create_list_get_remove_ingestion_source depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_create_list_get_remove_ingestion_source depends on test_healthchecks</skipped></testcase><testcase classname="tests.managed-ingestion.managed_ingestion_test" name="test_create_list_get_ingestion_execution_request" time="0.001"><skipped type="pytest.skip" message="test_create_list_get_ingestion_execution_request depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_create_list_get_ingestion_execution_request depends on test_healthchecks</skipped></testcase><testcase classname="tests.tags-and-terms.tags_and_terms_test" name="test_add_tag" time="0.001"><skipped type="pytest.skip" message="test_add_tag depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_add_tag depends on test_healthchecks</skipped></testcase><testcase classname="tests.tags-and-terms.tags_and_terms_test" name="test_add_tag_to_chart" time="0.001"><skipped type="pytest.skip" message="test_add_tag_to_chart depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_add_tag_to_chart depends on test_healthchecks</skipped></testcase><testcase classname="tests.tags-and-terms.tags_and_terms_test" name="test_add_term" time="0.001"><skipped type="pytest.skip" message="test_add_term depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_add_term depends on test_healthchecks</skipped></testcase><testcase classname="tests.tags-and-terms.tags_and_terms_test" name="test_update_schemafield" time="0.004"><skipped type="pytest.skip" message="test_update_schemafield depends on test_healthchecks">/Users/claudio.benfatto/datahub/smoke-test/venv/lib/python3.9/site-packages/pytest_dependency.py:103: test_update_schemafield depends on test_healthchecks</skipped></testcase></testsuite></testsuites>
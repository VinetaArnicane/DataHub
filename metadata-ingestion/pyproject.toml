[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=63.0.0", "wheel"]

[tool.ruff.lint.isort]
section-order = ["future", "patch", "standard-library", "third-party", "first-party", "local-folder"]
sections = { "patch" = ["datahub.utilities._markupsafe_compat", "datahub.sql_parsing._sqlglot_patch"] }
combine-as-imports = true

[tool.ruff]
target-version = "py38"
# Same as Black.
line-length = 88
# Exclude directories matching these patterns.
exclude = [
    ".git",
    "src/datahub/metadata",
    "venv",
    ".tox",
    "__pycache__",
]

[tool.ruff.lint]
extend-select = [
    "B",    # flake8-bugbear
    "C90",  # mccabe complexity
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "G010", # logging.warn -> logging.warning
    "I",    # isort
    "TID",  # flake8-tidy-imports
    "ANN20",# flake8-annotations
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
]

extend-ignore = [
    "E501",  # Handled by formatter
    "E111",  # Handled by formatter
    "E114",  # Handled by formatter
    "E117",  # Handled by formatter
    "E203",  # Ignore whitespace before ':' (matches Black)
    "B019",  # Allow usages of functools.lru_cache
    "B008",  # Allow function call in argument defaults
    "COM812", # Avoid conflicts with formatter
    "ANN204", # Missing return type annotation for special method `__init__`
    "ANN206", # Missing return type annotation for classmethod
    "ANN205", # Missing return type annotation for staticmethod
    "C400",  # Ignore Unnecessary generator
    "C410",  # Ignore Unnecessary list literal passed to `list()`
    "C414",  # Ignore Unnecessary `reversed()` call within `sorted()`
    "C417",  # Ignore Unnecessary  `map()` usage (rewrite using a list comprehension)
    "C419",  # Ignore Unnecessary list comprehension
    # TODO: Enable these later
    "B006",   # Mutable args
    "B017",   # Do not assert blind exception
    "B904",   # Checks for raise statements in exception handlers that lack a from clause
    "ANN201", # Missing return type annotation for public function
    "ANN202", # Missing return type annotation for private function
    "C401",   # Unnecessary generator
    "C403",   # Unnecessary list comprehension
    "C408",   # Unnecessary `list()` call
    "C416",   # Unnecessary Comprehension
]

[tool.ruff.lint.mccabe]
max-complexity = 20

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

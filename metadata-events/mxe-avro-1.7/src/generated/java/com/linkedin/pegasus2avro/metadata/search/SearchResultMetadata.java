/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.linkedin.pegasus2avro.metadata.search;  
@SuppressWarnings("all")
/** The model for the search result */
@org.apache.avro.specific.AvroGenerated
public class SearchResultMetadata extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SearchResultMetadata\",\"namespace\":\"com.linkedin.pegasus2avro.metadata.search\",\"doc\":\"The model for the search result\",\"fields\":[{\"name\":\"aggregations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"AggregationMetadata\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"The name of the aggregation, e.g, platform, origin\"},{\"name\":\"displayName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Name of the filter to be displayed in the UI\",\"default\":null},{\"name\":\"aggregations\",\"type\":{\"type\":\"map\",\"values\":\"long\",\"avro.java.string\":\"String\"},\"doc\":\"List of aggregations showing the number of documents falling into each bucket. e.g, for platform aggregation, the bucket can be hive, kafka, etc\"},{\"name\":\"filterValues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FilterValue\",\"fields\":[{\"name\":\"value\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"entity\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"java\":{\"class\":\"com.linkedin.pegasus2avro.common.urn.Urn\"}},{\"name\":\"facetCount\",\"type\":\"long\"},{\"name\":\"filtered\",\"type\":[\"null\",\"boolean\"],\"default\":null}]}}}]}},\"doc\":\"A list of search result metadata such as aggregations\",\"default\":[]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A list of search result metadata such as aggregations */
  @Deprecated public java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> aggregations;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SearchResultMetadata() {}

  /**
   * All-args constructor.
   */
  public SearchResultMetadata(java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> aggregations) {
    this.aggregations = aggregations;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return aggregations;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: aggregations = (java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'aggregations' field.
   * A list of search result metadata such as aggregations   */
  public java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> getAggregations() {
    return aggregations;
  }

  /**
   * Sets the value of the 'aggregations' field.
   * A list of search result metadata such as aggregations   * @param value the value to set.
   */
  public void setAggregations(java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> value) {
    this.aggregations = value;
  }

  /** Creates a new SearchResultMetadata RecordBuilder */
  public static com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder newBuilder() {
    return new com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder();
  }
  
  /** Creates a new SearchResultMetadata RecordBuilder by copying an existing Builder */
  public static com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder other) {
    return new com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder(other);
  }
  
  /** Creates a new SearchResultMetadata RecordBuilder by copying an existing SearchResultMetadata instance */
  public static com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder newBuilder(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata other) {
    return new com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder(other);
  }
  
  /**
   * RecordBuilder for SearchResultMetadata instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SearchResultMetadata>
    implements org.apache.avro.data.RecordBuilder<SearchResultMetadata> {

    private java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> aggregations;

    /** Creates a new Builder */
    private Builder() {
      super(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[0].schema(), other.aggregations);
        fieldSetFlags()[0] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SearchResultMetadata instance */
    private Builder(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata other) {
            super(com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.SCHEMA$);
      if (isValidValue(fields()[0], other.aggregations)) {
        this.aggregations = data().deepCopy(fields()[0].schema(), other.aggregations);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'aggregations' field */
    public java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> getAggregations() {
      return aggregations;
    }
    
    /** Sets the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder setAggregations(java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata> value) {
      validate(fields()[0], value);
      this.aggregations = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'aggregations' field has been set */
    public boolean hasAggregations() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'aggregations' field */
    public com.linkedin.pegasus2avro.metadata.search.SearchResultMetadata.Builder clearAggregations() {
      aggregations = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public SearchResultMetadata build() {
      try {
        SearchResultMetadata record = new SearchResultMetadata();
        record.aggregations = fieldSetFlags()[0] ? this.aggregations : (java.util.List<com.linkedin.pegasus2avro.metadata.search.AggregationMetadata>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

{
  "type" : "record",
  "name" : "SchemaMetadata",
  "namespace" : "com.linkedin.schema",
  "doc" : "SchemaMetadata to describe metadata related to store schema",
  "fields" : [ {
    "name" : "schemaName",
    "type" : "string",
    "doc" : "Schema name e.g. PageViewEvent, identity.Profile, ams.account_management_tracking",
    "validate" : {
      "strlen" : {
        "max" : 500,
        "min" : 1
      }
    }
  }, {
    "name" : "platform",
    "type" : "string",
    "doc" : "Standardized platform urn where schema is defined. The data platform Urn (urn:li:platform:{platform_name})",
    "java" : {
      "class" : "com.linkedin.common.urn.DataPlatformUrn"
    }
  }, {
    "name" : "version",
    "type" : "long",
    "doc" : "Every change to SchemaMetadata in the resource results in a new version. Version is server assigned. This version is differ from platform native schema version."
  }, {
    "name" : "created",
    "type" : {
      "type" : "record",
      "name" : "AuditStamp",
      "namespace" : "com.linkedin.common",
      "doc" : "Data captured on a resource/association/sub-resource level giving insight into when that resource/association/sub-resource moved into a particular lifecycle stage, and who acted to move it into that specific lifecycle stage.",
      "fields" : [ {
        "name" : "time",
        "type" : "long",
        "doc" : "When did the resource/association/sub-resource move into the specific lifecycle stage represented by this AuditEvent."
      }, {
        "name" : "actor",
        "type" : "string",
        "doc" : "The entity (e.g. a member URN) which will be credited for moving the resource/association/sub-resource into the specific lifecycle stage. It is also the one used to authorize the change.",
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      }, {
        "name" : "impersonator",
        "type" : [ "null", "string" ],
        "doc" : "The entity (e.g. a service URN) which performs the change on behalf of the Actor and must be authorized to act as the Actor.",
        "default" : null,
        "java" : {
          "class" : "com.linkedin.common.urn.Urn"
        }
      } ]
    },
    "doc" : "An AuditStamp corresponding to the creation of this resource/association/sub-resource"
  }, {
    "name" : "lastModified",
    "type" : "com.linkedin.common.AuditStamp",
    "doc" : "An AuditStamp corresponding to the last modification of this resource/association/sub-resource. If no modification has happened since creation, lastModified should be the same as created"
  }, {
    "name" : "deleted",
    "type" : [ "null", "com.linkedin.common.AuditStamp" ],
    "doc" : "An AuditStamp corresponding to the deletion of this resource/association/sub-resource. Logically, deleted MUST have a later timestamp than creation. It may or may not have the same time as lastModified depending upon the resource/association/sub-resource semantics.",
    "default" : null
  }, {
    "name" : "dataset",
    "type" : [ "null", "string" ],
    "doc" : "Dataset this schema metadata is associated with.",
    "default" : null,
    "java" : {
      "class" : "com.linkedin.common.urn.DatasetUrn"
    }
  }, {
    "name" : "cluster",
    "type" : [ "null", "string" ],
    "doc" : "The cluster this schema metadata resides from",
    "default" : null
  }, {
    "name" : "hash",
    "type" : "string",
    "doc" : "the SHA1 hash of the schema content"
  }, {
    "name" : "platformSchema",
    "type" : [ {
      "type" : "record",
      "name" : "EspressoSchema",
      "doc" : "Schema text of an espresso table schema.",
      "fields" : [ {
        "name" : "documentSchema",
        "type" : "string",
        "doc" : "The native espresso document schema."
      }, {
        "name" : "tableSchema",
        "type" : "string",
        "doc" : "The espresso table schema definition."
      } ]
    }, {
      "type" : "record",
      "name" : "OracleDDL",
      "doc" : "Schema holder for oracle data definition language that describes an oracle table.",
      "fields" : [ {
        "name" : "tableSchema",
        "type" : "string",
        "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
      } ]
    }, {
      "type" : "record",
      "name" : "MySqlDDL",
      "doc" : "Schema holder for MySql data definition language that describes an MySql table.",
      "fields" : [ {
        "name" : "tableSchema",
        "type" : "string",
        "doc" : "The native schema in the dataset's platform. This is a human readable (json blob) table schema."
      } ]
    }, {
      "type" : "record",
      "name" : "PrestoDDL",
      "doc" : "Schema holder for presto data definition language that describes a presto view.",
      "fields" : [ {
        "name" : "rawSchema",
        "type" : "string",
        "doc" : "The raw schema in the dataset's platform. This includes the DDL and the columns extracted from DDL."
      } ]
    }, {
      "type" : "record",
      "name" : "KafkaSchema",
      "doc" : "Schema holder for kafka schema.",
      "fields" : [ {
        "name" : "documentSchema",
        "type" : "string",
        "doc" : "The native kafka document schema. This is a human readable avro document schema."
      } ]
    }, {
      "type" : "record",
      "name" : "BinaryJsonSchema",
      "doc" : "Schema text of binary JSON schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native schema text for binary JSON file format."
      } ]
    }, {
      "type" : "record",
      "name" : "OrcSchema",
      "doc" : "Schema text of an ORC schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native schema for ORC file format."
      } ]
    }, {
      "type" : "record",
      "name" : "Schemaless",
      "doc" : "The dataset has no specific schema associated with it",
      "fields" : [ ]
    }, {
      "type" : "record",
      "name" : "KeyValueSchema",
      "doc" : "Schema text of a key-value store schema.",
      "fields" : [ {
        "name" : "keySchema",
        "type" : "string",
        "doc" : "The raw schema for the key in the key-value store."
      }, {
        "name" : "valueSchema",
        "type" : "string",
        "doc" : "The raw schema for the value in the key-value store."
      } ]
    }, {
      "type" : "record",
      "name" : "OtherSchema",
      "doc" : "Schema holder for undefined schema types.",
      "fields" : [ {
        "name" : "rawSchema",
        "type" : "string",
        "doc" : "The native schema in the dataset's platform."
      } ]
    } ],
    "doc" : "The native schema in the dataset's platform."
  }, {
    "name" : "fields",
    "type" : {
      "type" : "array",
      "items" : {
        "type" : "record",
        "name" : "SchemaField",
        "doc" : "SchemaField to describe metadata related to dataset schema. Schema normalization rules: http://go/tms-schema",
        "fields" : [ {
          "name" : "fieldPath",
          "type" : "string",
          "doc" : "Flattened name of the field. Field is computed from jsonPath field. For data translation rules refer to wiki page above."
        }, {
          "name" : "jsonPath",
          "type" : [ "null", "string" ],
          "doc" : "Flattened name of a field in JSON Path notation.",
          "default" : null
        }, {
          "name" : "nullable",
          "type" : "boolean",
          "doc" : "Indicates if this field is optional or nullable",
          "default" : false
        }, {
          "name" : "description",
          "type" : [ "null", "string" ],
          "doc" : "Description",
          "default" : null
        }, {
          "name" : "type",
          "type" : {
            "type" : "record",
            "name" : "SchemaFieldDataType",
            "doc" : "Schema field data types",
            "fields" : [ {
              "name" : "type",
              "type" : [ {
                "type" : "record",
                "name" : "BooleanType",
                "doc" : "Boolean field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "FixedType",
                "doc" : "Fixed field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "StringType",
                "doc" : "String field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "BytesType",
                "doc" : "Bytes field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "NumberType",
                "doc" : "Number data type: long, integer, short, etc..",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "EnumType",
                "doc" : "Enum field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "NullType",
                "doc" : "Null field type.",
                "fields" : [ ]
              }, {
                "type" : "record",
                "name" : "MapType",
                "doc" : "Map field type.",
                "fields" : [ {
                  "name" : "keyType",
                  "type" : [ "null", "string" ],
                  "doc" : "Key type in a map",
                  "default" : null
                }, {
                  "name" : "valueType",
                  "type" : [ "null", "string" ],
                  "doc" : "Type of the value in a map",
                  "default" : null
                } ]
              }, {
                "type" : "record",
                "name" : "ArrayType",
                "doc" : "Array field type.",
                "fields" : [ {
                  "name" : "nestedType",
                  "type" : [ "null", {
                    "type" : "array",
                    "items" : "string"
                  } ],
                  "doc" : "List of types this array holds.",
                  "default" : null
                } ]
              }, {
                "type" : "record",
                "name" : "UnionType",
                "doc" : "Union field type.",
                "fields" : [ {
                  "name" : "nestedTypes",
                  "type" : [ "null", {
                    "type" : "array",
                    "items" : "string"
                  } ],
                  "doc" : "List of types in union type.",
                  "default" : null
                } ]
              }, {
                "type" : "record",
                "name" : "RecordType",
                "doc" : "Record field type.",
                "fields" : [ ]
              } ],
              "doc" : "Data platform specific types"
            } ]
          },
          "doc" : "Platform independent field type of the field."
        }, {
          "name" : "nativeDataType",
          "type" : "string",
          "doc" : "The native type of the field in the dataset's platform as declared by platform schema."
        }, {
          "name" : "recursive",
          "type" : "boolean",
          "doc" : "There are use cases when a field in type B references type A. A field in A references field of type B. In such cases, we will mark the first field as recursive.",
          "default" : false
        } ]
      }
    },
    "doc" : "Client provided a list of fields from document schema."
  }, {
    "name" : "primaryKeys",
    "type" : [ "null", {
      "type" : "array",
      "items" : "string"
    } ],
    "doc" : "Client provided list of fields that define primary keys to access record. Field order defines hierarchical espresso keys. Empty lists indicates absence of primary key access patter. Value is a SchemaField@fieldPath.",
    "default" : null
  }, {
    "name" : "foreignKeysSpecs",
    "type" : [ "null", {
      "type" : "map",
      "values" : {
        "type" : "record",
        "name" : "ForeignKeySpec",
        "doc" : "Description of a foreign key in a schema.",
        "fields" : [ {
          "name" : "foreignKey",
          "type" : [ {
            "type" : "record",
            "name" : "DatasetFieldForeignKey",
            "doc" : "For non-urn based foregin keys.",
            "fields" : [ {
              "name" : "parentDataset",
              "type" : "string",
              "doc" : "dataset that stores the resource.",
              "java" : {
                "class" : "com.linkedin.common.urn.DatasetUrn"
              }
            }, {
              "name" : "currentFieldPaths",
              "type" : {
                "type" : "array",
                "items" : "string"
              },
              "doc" : "List of fields in hosting(current) SchemaMetadata that conform a foreign key. List can contain a single entry or multiple entries if several entries in hosting schema conform a foreign key in a single parent dataset."
            }, {
              "name" : "parentField",
              "type" : "string",
              "doc" : "SchemaField@fieldPath that uniquely identify field in parent dataset that this field references."
            } ]
          }, {
            "type" : "record",
            "name" : "UrnForeignKey",
            "doc" : "If SchemaMetadata fields make any external references and references are of type com.linkeidn.common.Urn or any children, this models can be used to mark it.",
            "fields" : [ {
              "name" : "currentFieldPath",
              "type" : "string",
              "doc" : "Field in hosting(current) SchemaMetadata."
            } ]
          } ],
          "doc" : "Foreign key definition in metadata schema."
        } ]
      }
    } ],
    "doc" : "Map captures all the references schema makes to external datasets. Map key is ForeignKeySpecName typeref.",
    "default" : null
  } ]
}
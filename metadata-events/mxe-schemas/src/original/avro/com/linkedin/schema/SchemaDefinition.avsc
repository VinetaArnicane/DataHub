{
  "type" : "record",
  "name" : "SchemaDefinition",
  "namespace" : "com.linkedin.schema",
  "doc" : "Represents the definition metadata for a schema",
  "fields" : [ {
    "name" : "rawSchema",
    "type" : [ "null", {
      "type" : "record",
      "name" : "AvroSchema",
      "doc" : "Schema text for avro schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native Avro schema text."
      } ]
    }, {
      "type" : "record",
      "name" : "BinaryJsonSchema",
      "doc" : "Schema text of binary JSON schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native schema text for binary JSON file format."
      } ]
    }, {
      "type" : "record",
      "name" : "DDL",
      "doc" : "Schema text for the data definition language that describes an Relational DBMS table.",
      "fields" : [ {
        "name" : "tableDDL",
        "type" : "string",
        "doc" : "The native SQL DDL that describe an Relational DBMS table."
      } ]
    }, {
      "type" : "record",
      "name" : "EspressoSchema",
      "doc" : "Schema text of an espresso table schema.",
      "fields" : [ {
        "name" : "documentSchema",
        "type" : "string",
        "doc" : "The native espresso document schema."
      }, {
        "name" : "tableSchema",
        "type" : "string",
        "doc" : "The espresso table schema definition."
      } ]
    }, {
      "type" : "record",
      "name" : "KeyValueSchema",
      "doc" : "Schema text of a key-value store schema.",
      "fields" : [ {
        "name" : "keySchema",
        "type" : "string",
        "doc" : "The raw schema for the key in the key-value store."
      }, {
        "name" : "valueSchema",
        "type" : "string",
        "doc" : "The raw schema for the value in the key-value store."
      } ]
    }, {
      "type" : "record",
      "name" : "OrcSchema",
      "doc" : "Schema text of an ORC schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native schema for ORC file format."
      } ]
    }, {
      "type" : "record",
      "name" : "ParquetSchema",
      "doc" : "Schema text for Parquet schema.",
      "fields" : [ {
        "name" : "schema",
        "type" : "string",
        "doc" : "The native Parquet schema text."
      } ]
    }, {
      "type" : "record",
      "name" : "Schemaless",
      "doc" : "The dataset has no specific schema associated with it",
      "fields" : [ ]
    } ],
    "doc" : "The dataset schema as observed from the data platform.",
    "default" : null
  }, {
    "name" : "normalizedSchema",
    "type" : [ "null", {
      "type" : "record",
      "name" : "NormalizedSchema",
      "doc" : "The standard schema representation after normalization.",
      "fields" : [ {
        "name" : "normalizedFields",
        "type" : {
          "type" : "array",
          "items" : {
            "type" : "record",
            "name" : "SchemaField",
            "doc" : "SchemaField to describe metadata related to dataset schema. Schema normalization rules: http://go/tms-schema",
            "fields" : [ {
              "name" : "fieldPath",
              "type" : "string",
              "doc" : "Flattened name of the field. Field is computed from jsonPath field. For data translation rules refer to wiki page above."
            }, {
              "name" : "jsonPath",
              "type" : [ "null", "string" ],
              "doc" : "Flattened name of a field in JSON Path notation.",
              "default" : null
            }, {
              "name" : "nullable",
              "type" : "boolean",
              "doc" : "Indicates if this field is optional or nullable",
              "default" : false
            }, {
              "name" : "description",
              "type" : [ "null", "string" ],
              "doc" : "Description",
              "default" : null
            }, {
              "name" : "type",
              "type" : {
                "type" : "record",
                "name" : "SchemaFieldDataType",
                "doc" : "Schema field data types",
                "fields" : [ {
                  "name" : "type",
                  "type" : [ {
                    "type" : "record",
                    "name" : "BooleanType",
                    "doc" : "Boolean field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "FixedType",
                    "doc" : "Fixed field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "StringType",
                    "doc" : "String field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "BytesType",
                    "doc" : "Bytes field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "NumberType",
                    "doc" : "Number data type: long, integer, short, etc..",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "EnumType",
                    "doc" : "Enum field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "NullType",
                    "doc" : "Null field type.",
                    "fields" : [ ]
                  }, {
                    "type" : "record",
                    "name" : "MapType",
                    "doc" : "Map field type.",
                    "fields" : [ {
                      "name" : "keyType",
                      "type" : [ "null", "string" ],
                      "doc" : "Key type in a map",
                      "default" : null
                    }, {
                      "name" : "valueType",
                      "type" : [ "null", "string" ],
                      "doc" : "Type of the value in a map",
                      "default" : null
                    } ]
                  }, {
                    "type" : "record",
                    "name" : "ArrayType",
                    "doc" : "Array field type.",
                    "fields" : [ {
                      "name" : "nestedType",
                      "type" : [ "null", {
                        "type" : "array",
                        "items" : "string"
                      } ],
                      "doc" : "List of types this array holds.",
                      "default" : null
                    } ]
                  }, {
                    "type" : "record",
                    "name" : "UnionType",
                    "doc" : "Union field type.",
                    "fields" : [ {
                      "name" : "nestedTypes",
                      "type" : [ "null", {
                        "type" : "array",
                        "items" : "string"
                      } ],
                      "doc" : "List of types in union type.",
                      "default" : null
                    } ]
                  }, {
                    "type" : "record",
                    "name" : "RecordType",
                    "doc" : "Record field type.",
                    "fields" : [ ]
                  } ],
                  "doc" : "Data platform specific types"
                } ]
              },
              "doc" : "Platform independent field type of the field."
            }, {
              "name" : "nativeDataType",
              "type" : "string",
              "doc" : "The native type of the field in the dataset's platform as declared by platform schema."
            }, {
              "name" : "recursive",
              "type" : "boolean",
              "doc" : "There are use cases when a field in type B references type A. A field in A references field of type B. In such cases, we will mark the first field as recursive.",
              "default" : false
            } ]
          }
        },
        "doc" : "List of normalized schema fields."
      } ]
    } ],
    "doc" : "The standardized schema after normalization process.",
    "default" : null
  } ]
}
fragment assertionDetails on Assertion {
    urn
    type
    platform {
        urn
        properties {
            displayName
            logoUrl
        }
        info {
            displayName
            logoUrl
        }
    }
    dataPlatformInstance {
        ...dataPlatformInstanceFields
    }
    info {
        type
        datasetAssertion {
            scope
            aggregation
            operator
            parameters {
                value {
                    value
                    type
                }
                minValue {
                    value
                    type
                }
                maxValue {
                    value
                    type
                }
            }
            fields {
                urn
                path
            }
            nativeType
            nativeParameters {
                key
                value
            }
            logic
        }
        description
    }
    tags {
        ...globalTagsFields
    }
}

fragment incrementingSegmentSpecDetails on IncrementingSegmentSpec {
    field {
        path
        type
        nativeType
    }
    transformer {
        type
        nativeType
    }
}

fragment assertionStdParametersDetails on AssertionStdParameters {
    value {
        value
        type
    }
    minValue {
        value
        type
    }
    maxValue {
        value
        type
    }
}

fragment assertionResultDetails on AssertionResult {
    type
    actualAggValue
    rowCount
    missingCount
    unexpectedCount
    externalUrl
    nativeResults {
        key
        value
    }
    error {
        type
        properties {
            key
            value
        }
    }
    # acryl only
    assertion {
        ...assertionInfo
    }
    parameters {
        ...assertionEvaluationParameters
    }
    assertionInferenceDetails {
        generatedAt
>>>>>>> 78454d13cd9 (Adding metadata models)
    }
}

fragment assertionRunEventDetails on AssertionRunEvent {
    timestampMillis
    assertionUrn
    status
    runtimeContext {
        key
        value
    }
    result {
        type
        actualAggValue
        rowCount
        missingCount
        unexpectedCount
        externalUrl
        nativeResults {
            key
            value
        }
    }
}

query getAssertionRuns($assertionUrn: String!, $startTime: Long, $endTime: Long, $limit: Int) {
    assertion(urn: $assertionUrn) {
        urn
        ...assertionDetails
        runEvents(status: COMPLETE, startTimeMillis: $startTime, endTimeMillis: $endTime, limit: $limit) {
            total
            failed
            succeeded
            runEvents {
                ...assertionRunEventDetails
            }
        }
    }
}

mutation deleteAssertion($urn: String!) {
    deleteAssertion(urn: $urn)
}

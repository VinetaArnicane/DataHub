mutation updateGlossaryTerm($input: GlossaryTermUpdateInput!) {
    updateGlossaryTerm(input: $input) {
        ...nonRecursiveGlossaryTerms
    }
}

query getGlossaryTerm($urn: String!, $start: Int, $count: Int) {
    glossaryTerm(urn: $urn) {
        urn
        type
        name
        hierarchicalName
        isRelatedTerms: relationships(input: { types: ["IsA"], direction: OUTGOING, start: $start, count: $count }) {
            start
            count
            total
            relationships {
                entity {
                    ... on GlossaryTerm {
                        urn
                    }
                }
            }
        }
        hasRelatedTerms: relationships(input: { types: ["HasA"], direction: OUTGOING, start: $start, count: $count }) {
            start
            count
            total
            relationships {
                entity {
                    ... on GlossaryTerm {
                        urn
                    }
                }
            }
        }
        ownership {
            ...ownershipFields
        }
        glossaryTermInfo {
            definition
            termSource
            sourceRef
            sourceUrl
            rawSchema
            customProperties {
                key
                value
            }
        }
         schemaMetadata(version: 0) {
            ...schemaMetadataFields
        }
        previousSchemaMetadata: schemaMetadata(version: -1) {
            ...schemaMetadataFields
        }
        editableSchemaMetadata {
            editableSchemaFieldInfo {
                fieldPath
                description
                globalTags {
                    ...globalTagsFields
                }
            }
        }

    }
}

query getGlossaryTermSchemaVersions($urn: String!, $version1: Long, $version2: Long) {
    glossaryTerm(urn: $urn) {
        urn
        name
        type
        hierarchicalName
        schemaMetadata(version: $version1) {
            ...schemaMetadataFields
        }
        previousSchemaMetadata: schemaMetadata(version: $version2) {
            ...schemaMetadataFields
        }
        editableSchemaMetadata {
            editableSchemaFieldInfo {
                fieldPath
                description
                globalTags {
                    ...globalTagsFields
                }
            }
        }
    }
}
